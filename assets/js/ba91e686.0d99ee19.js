"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[9957],{3191:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>c,toc:()=>h});var o=s(4848),i=s(8453),r=(s(1441),s(5347));const t={sidebar_position:2,title:"Auth API reference information",sidebar_label:"Auth",description:"Learn the Auth API calls you need to know about and how to use them with Momento services."},a="Auth API reference",c={id:"leaderboards/api-reference/auth",title:"Auth API reference information",description:"Learn the Auth API calls you need to know about and how to use them with Momento services.",source:"@site/docs/leaderboards/api-reference/auth.md",sourceDirName:"leaderboards/api-reference",slug:"/leaderboards/api-reference/auth",permalink:"/leaderboards/api-reference/auth",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/leaderboards/api-reference/auth.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Auth API reference information",sidebar_label:"Auth",description:"Learn the Auth API calls you need to know about and how to use them with Momento services."},sidebar:"leaderboardSidebar",previous:{title:"API Reference",permalink:"/leaderboards/api-reference/"},next:{title:"Response objects",permalink:"/leaderboards/api-reference/response-objects"}},l={},h=[{value:"GenerateApiKey API",id:"generateapikey-api",level:2},{value:"RefreshApiKey API",id:"refreshapikey-api",level:2},{value:"TokenScope objects",id:"tokenscope-objects",level:2},{value:"Permission objects",id:"permission-objects",level:2},{value:"CachePermission",id:"cachepermission",level:3},{value:"TokenScope example for a CachePermission object",id:"tokenscope-example-for-a-cachepermission-object",level:4},{value:"TopicPermission",id:"topicpermission",level:3},{value:"TokenScope example for a TopicPermission object",id:"tokenscope-example-for-a-topicpermission-object",level:4},{value:"GenerateDisposableToken API",id:"generatedisposabletoken-api",level:2},{value:"DisposableTokenScope objects",id:"disposabletokenscope-objects",level:3},{value:"DisposableTokenCachePermissions",id:"disposabletokencachepermissions",level:3},{value:"Example DisposableTokenScope object",id:"example-disposabletokenscope-object",level:4},{value:"FAQ",id:"faq",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"auth-api-reference",children:"Auth API reference"}),"\n",(0,o.jsx)(n.p,{children:"The auth APIs create and manage API keys and tokens for Momento services. These auth mechanisms can be scoped to have one or more permissions to grant access to one or more caches or topics."}),"\n",(0,o.jsx)("img",{src:"/img/momento-auth-tokens.png",width:"60%"}),"\n",(0,o.jsx)(n.h2,{id:"generateapikey-api",children:"GenerateApiKey API"}),"\n",(0,o.jsx)(n.p,{children:"Generates a new Momento auth token with the specified permissions and expiry."}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"scope"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.a,{href:"#tokenscope-objects",children:"TokenScope"})}),(0,o.jsx)(n.td,{children:"The permissions to grant to the new token. Pre-built TokenScope objects are provided by the SDKs."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"expiresIn"}),(0,o.jsx)(n.td,{children:"Number\xa0\xa0|\xa0\xa0ExpiresIn\xa0object"}),(0,o.jsxs)(n.td,{children:["The number of seconds until the token expires or an ExpiresIn object representing a duration by calling the ",(0,o.jsx)(n.code,{children:"ExpiresIn.never()"}),", ",(0,o.jsx)(n.code,{children:"ExpiresIn.minutes()"}),", or ",(0,o.jsx)(n.code,{children:"ExpiresIn.hours()"})," methods."]})]})]})]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Method response object"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Success","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"authToken"}),": string - the new auth token"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"refreshToken"}),": string - a refresh token that can be used with the ",(0,o.jsx)(n.a,{href:"#refreshapikey-api",children:"RefreshApiKey API"})," to refresh a token before it expires"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"endpoint"}),": string - the HTTP endpoint the Momento client should use when making requests"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"expiresAt"}),": Timestamp - the timestamp at which the token will expire"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Error"}),"\n"]}),(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/leaderboards/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Tokens to access the Momento control plane APIs can only be generated using the ",(0,o.jsx)(n.a,{href:"https://console.gomomento.com/",children:"Momento console"}),"."]})}),"\n",(0,o.jsx)(r.r,{js:"// Generate a token that allows all data plane APIs on all caches and topics.\nconst allDataRWTokenResponse = await authClient.generateApiKey(AllDataReadWrite, ExpiresIn.minutes(30));\nswitch (allDataRWTokenResponse.type) {\n  case GenerateApiKeyResponse.Success:\n    console.log('Generated an API key with AllDataReadWrite scope!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${allDataRWTokenResponse.apiKey.substring(0, 10)}`);\n    console.log(`Refresh token starts with: ${allDataRWTokenResponse.refreshToken.substring(0, 10)}`);\n    console.log(`Expires At: ${allDataRWTokenResponse.expiresAt.epoch()}`);\n    break;\n  case GenerateApiKeyResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with AllDataReadWrite scope: ${allDataRWTokenResponse.errorCode()}: ${allDataRWTokenResponse.toString()}`\n    );\n}\n\n// Generate a token that can only call read-only data plane APIs on a specific cache foo. No topic apis (publish/subscribe) are allowed.\nconst singleCacheROTokenResponse = await authClient.generateApiKey(\n  TokenScopes.cacheReadOnly('foo'),\n  ExpiresIn.minutes(30)\n);\nswitch (singleCacheROTokenResponse.type) {\n  case GenerateApiKeyResponse.Success:\n    console.log('Generated an API key with read-only access to cache foo!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${singleCacheROTokenResponse.apiKey.substring(0, 10)}`);\n    console.log(`Refresh token starts with: ${singleCacheROTokenResponse.refreshToken.substring(0, 10)}`);\n    console.log(`Expires At: ${singleCacheROTokenResponse.expiresAt.epoch()}`);\n    break;\n  case GenerateApiKeyResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with single cache read-only scope: ${singleCacheROTokenResponse.errorCode()}: ${singleCacheROTokenResponse.toString()}`\n    );\n}\n\n// Generate a token that can call all data plane APIs on all caches. No topic apis (publish/subscribe) are allowed.\nconst allCachesRWTokenResponse = await authClient.generateApiKey(\n  TokenScopes.cacheReadWrite(AllCaches),\n  ExpiresIn.minutes(30)\n);\nswitch (allCachesRWTokenResponse.type) {\n  case GenerateApiKeyResponse.Success:\n    console.log('Generated an API key with read-write access to all caches!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${allCachesRWTokenResponse.apiKey.substring(0, 10)}`);\n    console.log(`Refresh token starts with: ${allCachesRWTokenResponse.refreshToken.substring(0, 10)}`);\n    console.log(`Expires At: ${allCachesRWTokenResponse.expiresAt.epoch()}`);\n    break;\n  case GenerateApiKeyResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with all caches read-write scope: ${allCachesRWTokenResponse.errorCode()}: ${allCachesRWTokenResponse.toString()}`\n    );\n}\n\n// Generate a token that can call publish and subscribe on all topics within cache bar\nconst singleCacheAllTopicsRWTokenResponse = await authClient.generateApiKey(\n  TokenScopes.topicPublishSubscribe({name: 'bar'}, AllTopics),\n  ExpiresIn.minutes(30)\n);\nswitch (singleCacheAllTopicsRWTokenResponse.type) {\n  case GenerateApiKeyResponse.Success:\n    console.log('Generated an API key with publish-subscribe access to all topics within cache bar!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${singleCacheAllTopicsRWTokenResponse.apiKey.substring(0, 10)}`);\n    console.log(`Refresh token starts with: ${singleCacheAllTopicsRWTokenResponse.refreshToken.substring(0, 10)}`);\n    console.log(`Expires At: ${singleCacheAllTopicsRWTokenResponse.expiresAt.epoch()}`);\n    break;\n  case GenerateApiKeyResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with read-write scope for all topics in a single cache: ${singleCacheAllTopicsRWTokenResponse.errorCode()}: ${singleCacheAllTopicsRWTokenResponse.toString()}`\n    );\n}\n\n// Generate a token that can only call subscribe on topic where_is_mo within cache mo_nuts\nconst oneCacheOneTopicRWTokenResponse = await authClient.generateApiKey(\n  TokenScopes.topicSubscribeOnly('mo_nuts', 'where_is_mo'),\n  ExpiresIn.minutes(30)\n);\nswitch (oneCacheOneTopicRWTokenResponse.type) {\n  case GenerateApiKeyResponse.Success:\n    console.log('Generated an API key with subscribe-only access to topic where_is_mo within cache mo_nuts!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${oneCacheOneTopicRWTokenResponse.apiKey.substring(0, 10)}`);\n    console.log(`Refresh token starts with: ${oneCacheOneTopicRWTokenResponse.refreshToken.substring(0, 10)}`);\n    console.log(`Expires At: ${oneCacheOneTopicRWTokenResponse.expiresAt.epoch()}`);\n    break;\n  case GenerateApiKeyResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with read-write scope for single topic in a single cache: ${oneCacheOneTopicRWTokenResponse.errorCode()}: ${oneCacheOneTopicRWTokenResponse.toString()}`\n    );\n}\n\n// Generate a token with multiple permissions\nconst cachePermission1 = {\n  role: CacheRole.ReadWrite, // Managed role that grants access to read as well as write apis on caches\n  cache: 'acorns', // Scopes the access to a single cache named 'acorns'\n};\nconst cachePermission2 = {\n  role: CacheRole.ReadOnly, // Managed role that grants access to only read data apis on caches\n  cache: AllCaches, // Built-in value for access to all caches in the account\n};\nconst topicPermission1 = {\n  role: TopicRole.PublishSubscribe, // Managed role that grants access to subscribe as well as publish apis\n  cache: 'walnuts', // Scopes the access to a single cache named 'walnuts'\n  topic: 'mo_favorites', // Scopes the access to a single topic named 'mo_favorites' within cache 'walnuts'\n};\nconst topicPermission2 = {\n  role: TopicRole.SubscribeOnly, // Managed role that grants access to only subscribe api\n  cache: AllCaches, // Built-in value for all cache(s) in the account.\n  topic: AllTopics, // Built-in value for access to all topics in the listed cache(s).\n};\n\nconst permissions = {\n  permissions: [cachePermission1, cachePermission2, topicPermission1, topicPermission2],\n};\n\nconst multiplePermsTokenResponse = await authClient.generateApiKey(permissions, ExpiresIn.minutes(30));\nswitch (multiplePermsTokenResponse.type) {\n  case GenerateApiKeyResponse.Success:\n    console.log('Generated an API key with multiple cache and topic permissions!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${multiplePermsTokenResponse.apiKey.substring(0, 10)}`);\n    console.log(`Refresh token starts with: ${multiplePermsTokenResponse.refreshToken.substring(0, 10)}`);\n    console.log(`Expires At: ${multiplePermsTokenResponse.expiresAt.epoch()}`);\n    break;\n  case GenerateApiKeyResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with multiple permissions: ${multiplePermsTokenResponse.errorCode()}: ${multiplePermsTokenResponse.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""}),"\n",(0,o.jsx)(n.h2,{id:"refreshapikey-api",children:"RefreshApiKey API"}),"\n",(0,o.jsx)(n.p,{children:"Refreshes an existing, unexpired Momento auth token.  Produces a new auth token with the same permissions and expiry duration as the original auth token."}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"refreshToken"}),(0,o.jsx)(n.td,{children:"String"}),(0,o.jsxs)(n.td,{children:["The refreshToken for the current auth token, acquired from the original call to ",(0,o.jsx)(n.code,{children:"GenerateAuthToken"}),"."]})]})})]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Method response object"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Success","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"apiKey"}),": string - the new auth token"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"refreshToken"}),": string - a refresh token that can be used with the ",(0,o.jsx)(n.a,{href:"#refreshapikey-api",children:"RefreshApiKey API"})," to refresh the token before it expires"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"endpoint"}),": string - the HTTP endpoint the Momento client should use when making requests"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"expiresAt"}),": Timestamp - the timestamp at which the token will expire"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Error"}),"\n"]}),(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/leaderboards/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,o.jsx)(r.r,{js:"const generateTokenResponse = await authClient.generateApiKey(AllDataReadWrite, ExpiresIn.minutes(30));\n\nlet successResponse: GenerateApiKey.Success;\nswitch (generateTokenResponse.type) {\n  case GenerateApiKeyResponse.Success: {\n    successResponse = generateTokenResponse;\n    break;\n  }\n  case GenerateApiKeyResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey: ${generateTokenResponse.errorCode()}: ${generateTokenResponse.toString()}`\n    );\n}\n\nconsole.log('Generated API key; refreshing!');\nconst refreshAuthClient = new AuthClient({\n  credentialProvider: CredentialProvider.fromString({apiKey: successResponse.apiKey}),\n});\nconst refreshTokenResponse = await refreshAuthClient.refreshApiKey(successResponse.refreshToken);\nswitch (refreshTokenResponse.type) {\n  case RefreshApiKeyResponse.Success:\n    console.log('API key refreshed!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`Refreshed API key starts with: ${refreshTokenResponse.apiKey.substring(0, 10)}`);\n    console.log(`New refresh token starts with: ${refreshTokenResponse.refreshToken.substring(0, 10)}`);\n    console.log(`Refreshed API key expires At: ${refreshTokenResponse.expiresAt.epoch()}`);\n    break;\n  case RefreshApiKeyResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call refreshApiKey: ${refreshTokenResponse.errorCode()}: ${refreshTokenResponse.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""}),"\n",(0,o.jsx)(n.h2,{id:"tokenscope-objects",children:"TokenScope objects"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"permissions"}),(0,o.jsxs)(n.td,{children:["List <",(0,o.jsx)(n.a,{href:"#permission-objects",children:"Permission"}),">"]}),(0,o.jsx)(n.td,{children:"The permissions to grant to the new token."})]})})]}),"\n",(0,o.jsxs)(n.p,{children:["A TokenScope is a list of ",(0,o.jsx)(n.a,{href:"#permission-objects",children:"permission objects"}),". The list can have permissions that are of type ",(0,o.jsx)(n.a,{href:"#cachepermission",children:"CachePermission"})," or ",(0,o.jsx)(n.a,{href:"#topicpermission",children:"TopicPermission"}),", and can contain up to ten permission objects. A permission only grants access to the Momento data plane APIs (e.g. ",(0,o.jsx)(n.code,{children:"get"}),", ",(0,o.jsx)(n.code,{children:"set"}),", etc.). When an auth token is created with multiple permission objects, any matching permission will grant access. For example, if a single token is created with two permission objects:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"A permission object that allows ReadWrite access to all caches for the account"}),"\n",(0,o.jsxs)(n.li,{children:["A permission object that allows ReadOnly access to cache ",(0,o.jsx)(n.code,{children:"foo"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["In this case, the token will still allow use of data manipulation APIs (e.g. ",(0,o.jsx)(n.code,{children:"set"}),", ",(0,o.jsx)(n.code,{children:"delete"}),", ",(0,o.jsx)(n.code,{children:"DictionarySetFields"}),", etc.) on cache ",(0,o.jsx)(n.code,{children:"foo"})," because of the first permission."]}),"\n",(0,o.jsx)(n.h2,{id:"permission-objects",children:"Permission objects"}),"\n",(0,o.jsxs)(n.p,{children:["These objects define the specific role with cache or topic information and are then assigned to a ",(0,o.jsx)(n.a,{href:"#tokenscope-objects",children:"TokenScope"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"cachepermission",children:"CachePermission"}),"\n",(0,o.jsxs)(n.p,{children:["A component of a ",(0,o.jsx)(n.a,{href:"#tokenscope-objects",children:"TokenScope"})," object that defines permissions for a cache."]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"role"}),(0,o.jsx)(n.td,{children:"ReadOnly\xa0\xa0|\xa0\xa0ReadWrite\xa0\xa0|\xa0\xa0WriteOnly"}),(0,o.jsx)(n.td,{children:"The type of access granted by the permission."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"cache"}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"AllCaches"}),"\xa0\xa0|\xa0\xa0",(0,o.jsx)(n.code,{children:"CacheName"})]}),(0,o.jsxs)(n.td,{children:["A permission can be restricted to a select cache by name using a ",(0,o.jsx)(n.code,{children:"CacheName"})," object or ",(0,o.jsx)(n.code,{children:"AllCaches"})," built-in value."]})]})]})]}),"\n",(0,o.jsxs)(n.p,{children:["For role, using ",(0,o.jsx)(n.code,{children:"CacheRole.ReadOnly"})," allows access to all read data plane APIs on caches (e.g. ",(0,o.jsx)(n.code,{children:"get"}),", ",(0,o.jsx)(n.code,{children:"DictionaryGetField"}),", etc.) defined in the CacheSelector. Using ",(0,o.jsx)(n.code,{children:"CacheRole.ReadWrite"})," allows access for all read and write data plane APIs on the caches defined in the CacheSelector. Using ",(0,o.jsx)(n.code,{children:"CacheRole.WriteOnly"})," allows access for all write data plane APIs on the caches defined in the CacheSelector. ",(0,o.jsx)(n.code,{children:"CacheRole.WriteOnly"})," cannot be used for APIs that imply conditional writes like ",(0,o.jsx)(n.code,{children:"SetIf*"})," or return information about the updated state of a collection e.g. ",(0,o.jsx)(n.code,{children:"ListPushBack"})," returns the new length. Custom roles are not supported."]}),"\n",(0,o.jsxs)(n.p,{children:["For cache, the value can be the built-in ",(0,o.jsx)(n.code,{children:"AllCaches"})," or a string value containing the name of the cache this permission is for."]}),"\n",(0,o.jsx)(n.h4,{id:"tokenscope-example-for-a-cachepermission-object",children:"TokenScope example for a CachePermission object"}),"\n",(0,o.jsx)(n.p,{children:"This is an example of creating a TokenScope with just CachePermissions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const CachePermissions = {\n    permissions: [\n        {\n            role: CacheRole.ReadWrite, // Managed role\n            cache: "MyCache" // grants access to a specific cache\n        },\n        {\n            role: CacheRole.ReadOnly, // Managed role\n            cache: AllCaches // Built-in value for access to all caches in the account.\n        },\n    ],\n};\n'})}),"\n",(0,o.jsx)(n.h3,{id:"topicpermission",children:"TopicPermission"}),"\n",(0,o.jsxs)(n.p,{children:["A component of a ",(0,o.jsx)(n.a,{href:"#tokenscope-objects",children:"TokenScope"})," object that defines permissions for a token."]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"role"}),(0,o.jsx)(n.td,{children:"SubscribeOnly\xa0|\xa0PublishSubscribe\xa0\xa0|\xa0\xa0PublishOnly"}),(0,o.jsx)(n.td,{children:"The type of access granted by the permission."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"cache"}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"AllCaches"}),"\xa0\xa0|\xa0\xa0",(0,o.jsx)(n.code,{children:"CacheName"})]}),(0,o.jsxs)(n.td,{children:["A permission can be restricted to a select cache by name using a ",(0,o.jsx)(n.code,{children:"CacheName"})," object or to all caches in the account by using the ",(0,o.jsx)(n.code,{children:"AllCaches"})," built-in value."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"topic"}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"AllTopics"}),"\xa0\xa0|\xa0\xa0",(0,o.jsx)(n.code,{children:"TopicName"})]}),(0,o.jsxs)(n.td,{children:["A permission can be restricted to a select topic by name using a ",(0,o.jsx)(n.code,{children:"TopicName"})," object or to all topics in the above cache(s) by using the ",(0,o.jsx)(n.code,{children:"AllTopics"})," built-in value."]})]})]})]}),"\n",(0,o.jsxs)(n.p,{children:["For role, there are three managed roles to assign, ",(0,o.jsx)(n.code,{children:"TopicRole.PublishSubscribe"}),", ",(0,o.jsx)(n.code,{children:"TopicRole.SubscribeOnly"}),", and ",(0,o.jsx)(n.code,{children:"TopicRole.PublishOnly"}),". Custom roles are not supported. Using the SubscribeOnly role allows only subscribing to topics, using the PublishSubscribe role allows publishing and subscribing to topics, and using the PublishOnly role allows only publishing to topics."]}),"\n",(0,o.jsxs)(n.p,{children:["For cache, only topics within that cache's namespace are allowed by the permission. This can be set to the built-in ",(0,o.jsx)(n.code,{children:"AllCaches"})," value or a string specifically naming a cache."]}),"\n",(0,o.jsxs)(n.p,{children:["For topic, this can be set to the built-in ",(0,o.jsx)(n.code,{children:"AllTopics"})," value, which gives access to all topics in the cache(s) defined in cache or it can be a string with a specific topic name."]}),"\n",(0,o.jsx)(n.h4,{id:"tokenscope-example-for-a-topicpermission-object",children:"TokenScope example for a TopicPermission object"}),"\n",(0,o.jsx)(n.p,{children:"This is an example of creating a TokenScope with just TopicPermissions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const TopicsPermissions = {\n    permissions: [\n      {\n        role: TopicRole.PublishSubscribe, // Managed role\n        cache: 'the-great-wall', // grants access to a specific cache\n        topic: 'highlights', // grants access to a specific topic\n      },\n      {\n        role: TopicRole.SubscribeOnly, // Managed role\n        cache: AllCaches, // This is a built-in value for access to all caches in the account\n        topic: AllTopics, // This is a built-in value for access to all topic in the listed cache(s).\n      },\n    ],\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"generatedisposabletoken-api",children:"GenerateDisposableToken API"}),"\n",(0,o.jsx)(n.p,{children:"Generates a new disposable Momento auth token with the specified permissions and expiry."}),"\n",(0,o.jsx)(n.p,{children:"Disposable tokens differ from the usual Momento auth token in several key ways:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["They cannot be generated in the console, they can only be generated programatically. The token that's used for the ",(0,o.jsx)(n.code,{children:"generateDisposableToken"})," API call must be a token with Super User scope generated via the Momento console."]}),"\n",(0,o.jsx)(n.li,{children:"They must expire within one hour."}),"\n",(0,o.jsx)(n.li,{children:"They cannot be refreshed and thus do not come with a refresh token."}),"\n",(0,o.jsx)(n.li,{children:"Permissions are specified using DisposableTokenScope object."}),"\n"]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"scope"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.a,{href:"#disposabletokenscope-objects",children:"DisposableTokenScope"})}),(0,o.jsx)(n.td,{children:"The permissions to grant to the new disposable token. Pre-built DisposableTokenScope objects are provided by the SDKs."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"expiresIn"}),(0,o.jsx)(n.td,{children:"Number\xa0\xa0|\xa0\xa0ExpiresIn\xa0object"}),(0,o.jsxs)(n.td,{children:["The number of seconds until the token expires or an ExpiresIn object representing a duration by calling the ",(0,o.jsx)(n.code,{children:"ExpiresIn.minutes()"})," or ",(0,o.jsx)(n.code,{children:"ExpiresIn.hours(1)"})," methods. Disposable tokens must expire within 1 hour."]})]})]})]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Method response object"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Success","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"authToken"}),": string - the new disposable auth token"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"endpoint"}),": string - the HTTP endpoint the Momento client should use when making requests"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"expiresAt"}),": Timestamp - the timestamp at which the token will expire"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Error"}),"\n"]}),(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/leaderboards/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,o.jsx)(r.r,{js:"// Generate a disposable token with read-write access to a specific key in one cache\nconst oneKeyOneCacheToken = await authClient.generateDisposableToken(\n  DisposableTokenScopes.cacheKeyReadWrite('squirrels', 'mo'),\n  ExpiresIn.minutes(30)\n);\nswitch (oneKeyOneCacheToken.type) {\n  case GenerateDisposableTokenResponse.Success:\n    console.log('Generated a disposable API key with access to the \"mo\" key in the \"squirrels\" cache!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${oneKeyOneCacheToken.authToken.substring(0, 10)}`);\n    console.log(`Expires At: ${oneKeyOneCacheToken.expiresAt.epoch()}`);\n    break;\n  case GenerateDisposableTokenResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with disposable token scope: ${oneKeyOneCacheToken.errorCode()}: ${oneKeyOneCacheToken.toString()}`\n    );\n}\n\n// Generate a disposable token with read-write access to a specific key prefix in all caches\nconst keyPrefixAllCachesToken = await authClient.generateDisposableToken(\n  DisposableTokenScopes.cacheKeyPrefixReadWrite(AllCaches, 'squirrel'),\n  ExpiresIn.minutes(30)\n);\nswitch (keyPrefixAllCachesToken.type) {\n  case GenerateDisposableTokenResponse.Success:\n    console.log('Generated a disposable API key with access to keys prefixed with \"squirrel\" in all caches!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${keyPrefixAllCachesToken.authToken.substring(0, 10)}`);\n    console.log(`Expires At: ${keyPrefixAllCachesToken.expiresAt.epoch()}`);\n    break;\n  case GenerateDisposableTokenResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with disposable token scope: ${keyPrefixAllCachesToken.errorCode()}: ${keyPrefixAllCachesToken.toString()}`\n    );\n}\n\n// Generate a disposable token with read-only access to all topics in one cache\nconst allTopicsOneCacheToken = await authClient.generateDisposableToken(\n  TokenScopes.topicSubscribeOnly('squirrel', AllTopics),\n  ExpiresIn.minutes(30)\n);\nswitch (allTopicsOneCacheToken.type) {\n  case GenerateDisposableTokenResponse.Success:\n    console.log('Generated a disposable API key with access to all topics in the \"squirrel\" cache!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${allTopicsOneCacheToken.authToken.substring(0, 10)}`);\n    console.log(`Expires At: ${allTopicsOneCacheToken.expiresAt.epoch()}`);\n    break;\n  case GenerateDisposableTokenResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with disposable token scope: ${allTopicsOneCacheToken.errorCode()}: ${allTopicsOneCacheToken.toString()}`\n    );\n}\n\n// Generate a disposable token with write-only access to a single topic in all caches\nconst oneTopicAllCachesToken = await authClient.generateDisposableToken(\n  TokenScopes.topicPublishOnly(AllCaches, 'acorn'),\n  ExpiresIn.minutes(30)\n);\nswitch (oneTopicAllCachesToken.type) {\n  case GenerateDisposableTokenResponse.Success:\n    console.log('Generated a disposable API key with access to all topics in the \"squirrel\" cache!');\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\n    console.log(`API key starts with: ${oneTopicAllCachesToken.authToken.substring(0, 10)}`);\n    console.log(`Expires At: ${oneTopicAllCachesToken.expiresAt.epoch()}`);\n    break;\n  case GenerateDisposableTokenResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call generateApiKey with disposable token scope: ${oneTopicAllCachesToken.errorCode()}: ${oneTopicAllCachesToken.toString()}`\n    );\n}",python:"",java:'final GenerateDisposableTokenResponse response =\n    authClient\n        .generateDisposableTokenAsync(\n            DisposableTokenScopes.cacheKeyReadWrite("squirrel", "mo"), ExpiresIn.minutes(30))\n        .join();\nif (response instanceof GenerateDisposableTokenResponse.Success success) {\n  System.out.println("Successfully generated the disposable token: " + success.authToken());\n} else if (response instanceof GenerateDisposableTokenResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to generate disposable token: "\n          + error.getErrorCode(),\n      error);\n}',kotlin:"",go:'tokenId := "a token id"\nresp, err := authClient.GenerateDisposableToken(ctx, &momento.GenerateDisposableTokenRequest{\n\tExpiresIn: utils.ExpiresInSeconds(10),\n\tScope: momento.TopicSubscribeOnly(\n\t\tmomento.CacheName{Name: "a cache"},\n\t\tmomento.TopicName{Name: "a topic"},\n\t),\n\tProps: momento.DisposableTokenProps{\n\t\tTokenId: &tokenId,\n\t},\n})\n\nif err != nil {\n\tpanic(err)\n}\n\nswitch r := resp.(type) {\ncase *auth_resp.GenerateDisposableTokenSuccess:\n\tlog.Printf("Successfully generated a disposable token for endpoint=%s with tokenId=%s\\n", r.Endpoint, tokenId)\n}',csharp:'// Generate a disposable token with read-write access to a specific key in one cache\r\nvar oneKeyOneCacheToken = await authClient.GenerateDisposableTokenAsync(\r\n    DisposableTokenScopes.CacheKeyReadWrite("squirrels", "mo"),\r\n    ExpiresIn.Minutes(30)\r\n);\r\n\nif (oneKeyOneCacheToken is GenerateDisposableTokenResponse.Success token1)\r\n{\r\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\r\n    Console.WriteLine("The generated disposable token starts with: " + token1.AuthToken.Substring(0, 10));\r\n    Console.WriteLine("The token expires at (epoch timestamp): " + token1.ExpiresAt.Epoch());\r\n}\r\nelse if (oneKeyOneCacheToken is GenerateDisposableTokenResponse.Error err)\r\n{\r\n    Console.WriteLine("Error generating disposable token: " + err.Message);\r\n}\r\n\n// Generate a disposable token with read-write access to a specific key prefix in all caches\r\nvar keyPrefixAllCachesToken = await authClient.GenerateDisposableTokenAsync(\r\n    DisposableTokenScopes.CacheKeyPrefixReadWrite(CacheSelector.AllCaches, "squirrel"),\r\n    ExpiresIn.Minutes(30)\r\n);\r\n\nif (keyPrefixAllCachesToken is GenerateDisposableTokenResponse.Success token2)\r\n{\r\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\r\n    Console.WriteLine("The generated disposable token starts with: " + token2.AuthToken.Substring(0, 10));\r\n    Console.WriteLine("The token expires at (epoch timestamp): " + token2.ExpiresAt.Epoch());\r\n}\r\nelse if (keyPrefixAllCachesToken is GenerateDisposableTokenResponse.Error err)\r\n{\r\n    Console.WriteLine("Error generating disposable token: " + err.Message);\r\n}\r\n\n// Generate a disposable token with read-only access to all topics in one cache\r\nvar allTopicsOneCacheToken = await authClient.GenerateDisposableTokenAsync(\r\n    DisposableTokenScopes.TopicSubscribeOnly("squirrel", TopicSelector.AllTopics),\r\n    ExpiresIn.Minutes(30)\r\n);\r\n\nif (allTopicsOneCacheToken is GenerateDisposableTokenResponse.Success token3)\r\n{\r\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\r\n    Console.WriteLine("The generated disposable token starts with: " + token3.AuthToken.Substring(0, 10));\r\n    Console.WriteLine("The token expires at (epoch timestamp): " + token3.ExpiresAt.Epoch());\r\n}\r\nelse if (allTopicsOneCacheToken is GenerateDisposableTokenResponse.Error err)\r\n{\r\n    Console.WriteLine("Error generating disposable token: " + err.Message);\r\n}\r\n\n// Generate a disposable token with write-only access to a single topic in all caches\r\nvar oneTopicAllCachesToken = await authClient.GenerateDisposableTokenAsync(\r\n    DisposableTokenScopes.TopicPublishOnly(CacheSelector.AllCaches, "acorn"),\r\n    ExpiresIn.Minutes(30)\r\n);\r\n\nif (oneTopicAllCachesToken is GenerateDisposableTokenResponse.Success token4)\r\n{\r\n    // logging only a substring of the tokens, because logging security credentials is not advisable :)\r\n    Console.WriteLine("The generated disposable token starts with: " + token4.AuthToken.Substring(0, 10));\r\n    Console.WriteLine("The token expires at (epoch timestamp): " + token4.ExpiresAt.Epoch());\r\n}\r\nelse if (oneTopicAllCachesToken is GenerateDisposableTokenResponse.Error err)\r\n{\r\n    Console.WriteLine("Error generating disposable token: " + err.Message);\r\n}\r\n',php:"",rust:"",elixir:"",swift:"",dart:"",ts:""}),"\n",(0,o.jsx)(n.h3,{id:"disposabletokenscope-objects",children:"DisposableTokenScope objects"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"permissions"}),(0,o.jsxs)(n.td,{children:["List <",(0,o.jsx)(n.a,{href:"#disposabletokencachepermissions",children:"DisposableTokenCachePermission"}),"\xa0\xa0|\xa0\xa0",(0,o.jsx)(n.a,{href:"#permission-objects",children:"Permission"}),">"]}),(0,o.jsx)(n.td,{children:"The permissions to grant to the new token."})]})})]}),"\n",(0,o.jsxs)(n.p,{children:["The DisposableTokenScope object will accept permissions objects of the type ",(0,o.jsx)(n.a,{href:"#cachepermission",children:"CachePermission"}),", ",(0,o.jsx)(n.a,{href:"#topicpermission",children:"TopicPermission"}),", or ",(0,o.jsx)(n.a,{href:"#disposabletokencachepermissions",children:"DisposableTokenCachePermission"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"disposabletokencachepermissions",children:"DisposableTokenCachePermissions"}),"\n",(0,o.jsxs)(n.p,{children:["The DisposableTokenCachePermission is an extension of CachePermission, so it has the same fields as CachePermission but also has an additional ",(0,o.jsx)(n.code,{children:"item"})," field so you can define permissions for a cache and the items within the cache."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, you can restrict access to only a specific key or a set of keys beginning with some prefix when you set ",(0,o.jsx)(n.code,{children:"item"})," to a string that represents a key or key-prefix. Alternately, if you set ",(0,o.jsx)(n.code,{children:"item"})," to AllCacheItems, you would produce the same set of permissions as a normal CachePermission."]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Name"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"role"}),(0,o.jsx)(n.td,{children:"ReadOnly\xa0\xa0|\xa0\xa0ReadWrite\xa0\xa0|\xa0\xa0WriteOnly"}),(0,o.jsx)(n.td,{children:"The type of access granted by the permission."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"cache"}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"AllCaches"}),"\xa0\xa0|\xa0\xa0",(0,o.jsx)(n.code,{children:"CacheName"})]}),(0,o.jsxs)(n.td,{children:["A permission can be restricted to a select cache by name using a ",(0,o.jsx)(n.code,{children:"CacheName"})," object or ",(0,o.jsx)(n.code,{children:"AllCaches"})," built-in value."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"item"}),(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"AllCacheItems"}),"\xa0\xa0|\xa0\xa0",(0,o.jsx)(n.code,{children:"Key"}),"\xa0\xa0|\xa0\xa0",(0,o.jsx)(n.code,{children:"KeyPrefix"})]}),(0,o.jsxs)(n.td,{children:["A permission can be restricted to select cache items by name using a ",(0,o.jsx)(n.code,{children:"Key"})," or ",(0,o.jsx)(n.code,{children:"KeyPrefix"})," object or ",(0,o.jsx)(n.code,{children:"AllCachesItems"})," built-in value."]})]})]})]}),"\n",(0,o.jsxs)(n.p,{children:["For role, using ",(0,o.jsx)(n.code,{children:"CacheRole.ReadOnly"})," allows access to all read data plane APIs on caches (e.g. ",(0,o.jsx)(n.code,{children:"get"}),", ",(0,o.jsx)(n.code,{children:"DictionaryGetField"}),", etc.) defined in the CacheSelector. Using ",(0,o.jsx)(n.code,{children:"CacheRole.ReadWrite"})," allows access for all read and write data plane APIs on the caches defined in the CacheSelector. Using ",(0,o.jsx)(n.code,{children:"CacheRole.WriteOnly"})," allows access for all write data plane APIs on the caches defined in the CacheSelector. ",(0,o.jsx)(n.code,{children:"CacheRole.WriteOnly"})," cannot be used for APIs that imply conditional writes like ",(0,o.jsx)(n.code,{children:"SetIf*"})," or return information about the updated state of a collection e.g. ",(0,o.jsx)(n.code,{children:"ListPushBack"})," returns the new length. Custom roles are not supported."]}),"\n",(0,o.jsxs)(n.p,{children:["For cache, the value can be the built-in ",(0,o.jsx)(n.code,{children:"AllCaches"})," or a string value containing the name of the cache this permission is for."]}),"\n",(0,o.jsxs)(n.p,{children:["For item, the value can be the built-in ",(0,o.jsx)(n.code,{children:"AllCacheItems"})," or a string value containing the key or key prefix of the cache item(s) this permission is for."]}),"\n",(0,o.jsx)(n.h4,{id:"example-disposabletokenscope-object",children:"Example DisposableTokenScope object"}),"\n",(0,o.jsx)(n.p,{children:"This is an example of creating a DisposableTokenScope with all three types of permission objects: CachePermission, TopicPermission, and DisposableTokenCachePermission."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const exampleDisposableTokenPermission: DisposableTokenCachePermission = {\n  role: CacheRole.WriteOnly,\n  cache: "WriteCache",\n  item: {\n    keyPrefix: "WriteKey"\n  }\n};\n\nconst exampleCachePermission: CachePermission = {\n  role: CacheRole.ReadOnly,\n  cache: "ReadCache"\n};\n\nconst exampleTopicPermission: TopicPermission = {\n  role: TopicRole.PublishSubscribe,\n  cache: "ReadWriteCache",\n  topic: "MyTopic"\n}\n\nconst exampleScope: DisposableTokenScope = {\n    permissions: [\n      exampleDisposableTokenPermission,\n      exampleCachePermission,\n      exampleTopicPermission,\n    ],\n};\n\n// Then pass in the entire DisposableTokenScope object when\n// you call generateDisposableToken\nconst tokenResponse = await authClient.generateDisposableToken(\n  exampleScope,\n  ExpiresIn.minutes(30)\n);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Can I create a custom role for a cache or topic permission?"}),(0,o.jsx)(n.p,{children:"No. We only support the managed roles listed above for each permission."})]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Do these tokens control access to the Momento control plane APIs?"}),(0,o.jsxs)(n.p,{children:["Access tokens generated with the ",(0,o.jsx)(n.a,{href:"#generateapikey-api",children:"GenerateApiKey"})," API only control access to the Momento data plane APIs. A token for access to Momento's control plane APIs must be generated using the ",(0,o.jsx)(n.a,{href:"https://console.gomomento.com/",children:"Momento console"}),"."]})]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If you have any questions not answered here, please jump on ",(0,o.jsx)(n.a,{href:"https://discord.gg/3HkAKjUZGq",children:"our Discord server"})," and ask our experts in the support channel."]})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},9365:(e,n,s)=>{s.d(n,{A:()=>t});s(6540);var o=s(4164);const i={tabItem:"tabItem_Ymn6"};var r=s(4848);function t(e){let{children:n,hidden:s,className:t}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,o.A)(i.tabItem,t),hidden:s,children:n})}},1470:(e,n,s)=>{s.d(n,{A:()=>T});var o=s(6540),i=s(4164),r=s(3104),t=s(6347),a=s(205),c=s(7485),l=s(1682),h=s(679);function p(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:s}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:s,attributes:o,default:i}}=e;return{value:n,label:s,attributes:o,default:i}}))}(s);return function(e){const n=(0,l.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function u(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:s}=e;const i=(0,t.W6)(),r=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,c.aZ)(r),(0,o.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})}),[r,i])]}function x(e){const{defaultValue:n,queryString:s=!1,groupId:i}=e,r=d(e),[t,c]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=s.find((e=>e.default))??s[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:r}))),[l,p]=b({queryString:s,groupId:i}),[x,g]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,h.Dv)(s);return[i,(0,o.useCallback)((e=>{s&&r.set(e)}),[s,r])]}({groupId:i}),m=(()=>{const e=l??x;return u({value:e,tabValues:r})?e:null})();(0,a.A)((()=>{m&&c(m)}),[m]);return{selectedValue:t,selectValue:(0,o.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),p(e),g(e)}),[p,g,r]),tabValues:r}}var g=s(2303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=s(4848);function k(e){let{className:n,block:s,selectedValue:o,selectValue:t,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),h=e=>{const n=e.currentTarget,s=c.indexOf(n),i=a[s].value;i!==o&&(l(n),t(i))},p=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;n=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;n=c[s]??c[c.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":s},n),children:a.map((e=>{let{value:n,label:s,attributes:r}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>c.push(e),onKeyDown:p,onClick:h,...r,className:(0,i.A)("tabs__item",m.tabItem,r?.className,{"tabs__item--active":o===n}),children:s??n},n)}))})}function f(e){let{lazy:n,children:s,selectedValue:i}=e;const r=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function y(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,i.A)("tabs-container",m.tabList),children:[(0,j.jsx)(k,{...n,...e}),(0,j.jsx)(f,{...n,...e})]})}function T(e){const n=(0,g.A)();return(0,j.jsx)(y,{...e,children:p(e.children)},String(n))}},1441:(e,n,s)=>{s(6540)},5347:(e,n,s)=>{s.d(n,{r:()=>a});var o=s(1470),i=s(9365),r=s(1432),t=(s(6540),s(4848));const a=e=>{let{js:n,python:s,java:a,kotlin:c,go:l,csharp:h,php:p,rust:d,ruby:u,elixir:b,swift:x,dart:g,cli:m}=e;return n||s||a||c||l||h||p||d||u||b||x||g||m?(0,t.jsxs)(o.A,{children:[n&&(0,t.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,t.jsx)(r.A,{language:"js",children:n})}),s&&(0,t.jsx)(i.A,{value:"python",label:"Python",children:(0,t.jsx)(r.A,{language:"python",children:s})}),a&&(0,t.jsx)(i.A,{value:"java",label:"Java",children:(0,t.jsx)(r.A,{language:"java",children:a})}),c&&(0,t.jsx)(i.A,{value:"kotlin",label:"Kotlin",children:(0,t.jsx)(r.A,{language:"kotlin",children:c})}),l&&(0,t.jsx)(i.A,{value:"go",label:"Go",children:(0,t.jsx)(r.A,{language:"go",children:l})}),h&&(0,t.jsx)(i.A,{value:"csharp",label:"C#",children:(0,t.jsx)(r.A,{language:"csharp",children:h})}),p&&(0,t.jsx)(i.A,{value:"php",label:"PHP",children:(0,t.jsx)(r.A,{language:"php",children:p})}),d&&(0,t.jsx)(i.A,{value:"rust",label:"Rust",children:(0,t.jsx)(r.A,{language:"rust",children:d})}),u&&(0,t.jsx)(i.A,{value:"ruby",label:"Ruby",children:(0,t.jsx)(r.A,{language:"ruby",children:u})}),b&&(0,t.jsx)(i.A,{value:"elixir",label:"Elixir",children:(0,t.jsx)(r.A,{language:"elixir",children:b})}),x&&(0,t.jsx)(i.A,{value:"swift",label:"Swift",children:(0,t.jsx)(r.A,{language:"swift",children:x})}),g&&(0,t.jsx)(i.A,{value:"dart",label:"Dart",children:(0,t.jsx)(r.A,{language:"dart",children:g})}),m&&(0,t.jsx)(i.A,{value:"cli",label:"CLI",children:(0,t.jsx)(r.A,{language:"cli",children:m})})]}):null}}}]);