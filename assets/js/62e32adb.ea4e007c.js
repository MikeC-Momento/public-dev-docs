"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[3458],{2893:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var n=s(4848),r=s(8453),c=(s(1441),s(5347));const o={sidebar_position:4,sidebar_label:"Sorted sets",title:"Sorted set collections API reference",description:"Learn how to interact with the API for sorted set collection data types in Momento Cache."},l="Sorted set collections",i={id:"cache/develop/api-reference/sorted-set-collections",title:"Sorted set collections API reference",description:"Learn how to interact with the API for sorted set collection data types in Momento Cache.",source:"@site/docs/cache/develop/api-reference/sorted-set-collections.md",sourceDirName:"cache/develop/api-reference",slug:"/cache/develop/api-reference/sorted-set-collections",permalink:"/cache/develop/api-reference/sorted-set-collections",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/cache/develop/api-reference/sorted-set-collections.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Sorted sets",title:"Sorted set collections API reference",description:"Learn how to interact with the API for sorted set collection data types in Momento Cache."},sidebar:"cacheSidebar",previous:{title:"Sets",permalink:"/cache/develop/api-reference/set-collections"},next:{title:"Auth",permalink:"/cache/develop/api-reference/auth"}},d={},a=[{value:"Sorted set methods",id:"sorted-set-methods",level:2},{value:"SortedSetPutElement",id:"sortedsetputelement",level:3},{value:"SortedSetPutElements",id:"sortedsetputelements",level:3},{value:"SortedSetFetchByRank",id:"sortedsetfetchbyrank",level:3},{value:"SortedSetFetchByScore",id:"sortedsetfetchbyscore",level:3},{value:"SortedSetGetScore",id:"sortedsetgetscore",level:3},{value:"SortedSetGetScores",id:"sortedsetgetscores",level:3},{value:"SortedSetRemoveElement",id:"sortedsetremoveelement",level:3},{value:"SortedSetRemoveElements",id:"sortedsetremoveelements",level:3},{value:"SortedSetGetRank",id:"sortedsetgetrank",level:3},{value:"SortedSetIncrementScore",id:"sortedsetincrementscore",level:3},{value:"SortedSetElement",id:"sortedsetelement",level:2},{value:"SortedSetLength",id:"sortedsetlength",level:3},{value:"SortedSetLengthByScore",id:"sortedsetlengthbyscore",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"sorted-set-collections",children:"Sorted set collections"})}),"\n",(0,n.jsx)(t.p,{children:"A sorted set in Momento Cache is a collection of unique elements with a value (String, Byte[], etc.) and score (signed double 64-bit float) pair. The elements in a sorted set are ordered by score."}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["Momento collection types use a ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/collection-ttl",children:"CollectionTTL"}),' to specify their TTL behavior. This is an optional argument for all "write" operations.']})}),"\n",(0,n.jsx)(t.h2,{id:"sorted-set-methods",children:"Sorted set methods"}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetputelement",children:"SortedSetPutElement"}),"\n",(0,n.jsxs)(t.p,{children:["Adds a new or updates an existing ",(0,n.jsx)(t.a,{href:"#sortedsetelement",children:"sorted set element"})," in a sorted set."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"If the set does not exist, this method creates a new sorted set collection with the element passed in."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["If the set exists, the element is added to the sorted set if that ",(0,n.jsx)(t.strong,{children:"value"})," doesn't exist. If the value of that element does exist, that element is overwritten."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection to be altered."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"value"}),(0,n.jsx)(t.td,{children:"String | Byte[]"}),(0,n.jsx)(t.td,{children:"The value of the element to be added to the sorted set by this operation."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"score"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"The score of the element to be added to the sorted set by this operation."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ttl"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/collection-ttl",children:"CollectionTTL object"})}),(0,n.jsx)(t.td,{children:"TTL for the sorted set collection. This TTL takes precedence over the TTL used when initializing a cache connection client."})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Success"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"const result = await cacheClient.sortedSetPutElement(cacheName, 'test-sorted-set', 'test-value', 5);\nswitch (result.type) {\n  case CacheSortedSetPutElementResponse.Success:\n    console.log(\"Value 'test-value' with score '5' added successfully to sorted set 'test-sorted-set'\");\n    break;\n  case CacheSortedSetPutElementResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetPutElement on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client\n      .sorted_set_put_element(cache_name, "sorted_set_name", "value", 1.0)\n      .await?;\n  println!("Element added to sorted set");',elixir:"case Momento.CacheClient.sorted_set_put_element(\n       client,\n       \"test-cache\",\n       \"test-sorted-set\",\n       \"test-value\",\n       5.0\n     ) do\n  {:ok, _} ->\n    IO.puts(\n      \"Value 'test-value' with score '5' added successfully to sorted set 'test-sorted-set'\"\n    )\n\n  {:error, error} ->\n    IO.puts(\n      \"An error occurred while attempting to put an element into sorted set 'test-sorted-set' in cache 'test-cache': #{error.error_code}\"\n    )\n\n    raise error\nend",swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetputelements",children:"SortedSetPutElements"}),"\n",(0,n.jsxs)(t.p,{children:["Adds new or updates existing ",(0,n.jsx)(t.a,{href:"#sortedsetelement",children:"sorted set elements"})," in a sorted set collection."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"If the set does not exist, this method creates a new sorted set collection with the element(s) passed in."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["If the set exists, for each ",(0,n.jsx)(t.a,{href:"#sortedsetelement",children:"SortedSetElement"})," in the array, each element is added to the sorted set if that ",(0,n.jsx)(t.strong,{children:"value"})," doesn't exist. If the value of that element does exist, that element is overwritten."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection to be altered."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"elements"}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.a,{href:"#sortedsetelement",children:"SortedSetElement"}),"[]"]}),(0,n.jsx)(t.td,{children:"Elements to be added to the sorted set by this operation."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ttl"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/collection-ttl",children:"CollectionTTL object"})}),(0,n.jsx)(t.td,{children:"TTL for the sorted set collection. This TTL takes precedence over the TTL used when initializing a cache connection client."})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Success"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"const result = await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nswitch (result.type) {\n  case CacheSortedSetPutElementsResponse.Success:\n    console.log(\"Elements added successfully to sorted set 'test-sorted-set'\");\n    break;\n  case CacheSortedSetPutElementsResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetPutElements on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client\n      .sorted_set_put_elements(\n          cache_name,\n          "sorted_set_name",\n          vec![("value1", 1.0), ("value2", 2.0)],\n      )\n      .await?;\n  println!("Elements added to sorted set");',elixir:'case Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n       {"key1", 10.0},\n       {"key2", 20.0}\n     ]) do\n  {:ok, _} ->\n    IO.puts("Elements added successfully to sorted set \'test-sorted-set\'")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to put elements into sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetfetchbyrank",children:"SortedSetFetchByRank"}),"\n",(0,n.jsx)(t.p,{children:"Fetch elements of sorted set, optionally filtered by rank, and return them in ascending or descending order."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"startRank"}),(0,n.jsx)(t.td,{children:"Optional[integer]"}),(0,n.jsx)(t.td,{children:"The inclusive start rank of the results. Default is zero."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"endRank"}),(0,n.jsx)(t.td,{children:"Optional[integer]"}),(0,n.jsxs)(t.td,{children:["The exclusive end rank of the results. Default is ",(0,n.jsx)(t.code,{children:"null"}),", ie up to and including the element ranked last."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"order"}),(0,n.jsx)(t.td,{children:"Ascending | Descending"}),(0,n.jsx)(t.td,{children:"The order you want the sorted set returned."})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Hit","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"elements(): SortedSetElement[]"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Miss"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nconst result = await cacheClient.sortedSetFetchByRank(cacheName, 'test-sorted-set');\n\n// simplified style; assume the value was found\nconsole.log(`Sorted set fetched: ${result.value()!}`);\n\n// pattern-matching style; safer for production code\nswitch (result.type) {\n  case CacheSortedSetFetchResponse.Hit:\n    console.log(\"Values from sorted set 'test-sorted-set' fetched by rank successfully- \");\n    result.value().forEach(res => {\n      console.log(`${res.value} : ${res.score}`);\n    });\n    break;\n  case CacheSortedSetFetchResponse.Miss:\n    console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n    break;\n  case CacheSortedSetFetchResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetFetchByRank on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let response = cache_client\n      .sorted_set_fetch_by_rank(\n          cache_name,\n          "sorted_set_name",\n          SortedSetOrder::Ascending,\n          None,\n          None,\n      )\n      .await?;\n\n  match response {\n      SortedSetFetchResponse::Hit { value } => match value.into_strings() {\n          Ok(vec) => {\n              println!("Fetched elements: {:?}", vec);\n          }\n          Err(error) => {\n              eprintln!("Error converting values into strings: {}", error);\n          }\n      },\n      SortedSetFetchResponse::Miss => println!("Cache miss"),\n  }',elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_fetch_by_rank(client, "test-cache", "test-sorted-set") do\n  {:ok, hit} ->\n    IO.puts("Values from sorted set \'test-sorted-set\' fetched by rank successfully:")\n    IO.inspect(hit.value)\n\n  :miss ->\n    IO.puts("Sorted Set \'test-sorted-set\' was not found in cache \'test-cache\'")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to fetch by rank on sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetfetchbyscore",children:"SortedSetFetchByScore"}),"\n",(0,n.jsx)(t.p,{children:"Fetch elements of sorted set, optionally filtered by score, and return them in ascending or descending order."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"minScore"}),(0,n.jsx)(t.td,{children:"Optional[double]"}),(0,n.jsxs)(t.td,{children:["The inclusive low score of the results. Default is ",(0,n.jsx)(t.code,{children:"-inf"}),", ie include through the lowest score."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"maxScore"}),(0,n.jsx)(t.td,{children:"Optional[double]"}),(0,n.jsxs)(t.td,{children:["The inclusive high score of the results. Default is ",(0,n.jsx)(t.code,{children:"+inf"}),", ie include through the highest score."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"order"}),(0,n.jsx)(t.td,{children:"Ascending | Descending"}),(0,n.jsx)(t.td,{children:"The order you want the sorted set returned."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"offset"}),(0,n.jsx)(t.td,{children:"Optional[int]"}),(0,n.jsx)(t.td,{children:"The offset, inclusive, into the filtered list from which to start returning results. Default is 0, ie do not filter. If specified, must be non-negative."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"count"}),(0,n.jsx)(t.td,{children:"Optional[int]"}),(0,n.jsxs)(t.td,{children:["The maximum number of results from the filtered list to return. Default is ",(0,n.jsx)(t.code,{children:"null"}),", ie no limit. If specified, must be strictly positive."]})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Hit","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"elements(): SortedSetElement[]"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Miss"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 100],\n    ['key2', 25],\n  ])\n);\nconst result = await cacheClient.sortedSetFetchByScore(cacheName, 'test-sorted-set');\n\n// simplified style; assume the value was found\nconsole.log(`Fetched values from sorted set: ${result.value()!}`);\n\n// pattern-matching style; safer for production code\nswitch (result.type) {\n  case CacheSortedSetFetchResponse.Hit:\n    console.log(\"Values from sorted set 'test-sorted-set' fetched by score successfully- \");\n    result.value().forEach(res => {\n      console.log(`${res.value} : ${res.score}`);\n    });\n    break;\n  case CacheSortedSetFetchResponse.Miss:\n    console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n    break;\n  case CacheSortedSetFetchResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetFetchByScore on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let response = cache_client\n      .sorted_set_fetch_by_score(cache_name, "sorted_set_name", SortedSetOrder::Ascending)\n      .await?;\n\n  match response {\n      SortedSetFetchResponse::Hit { value } => match value.into_strings() {\n          Ok(vec) => {\n              println!("Fetched elements: {:?}", vec);\n          }\n          Err(error) => {\n              eprintln!("Error converting values into strings: {}", error);\n          }\n      },\n      SortedSetFetchResponse::Miss => println!("Cache miss"),\n  }',elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_fetch_by_score(client, "test-cache", "test-sorted-set") do\n  {:ok, hit} ->\n    IO.puts("Values from sorted set \'test-sorted-set\' fetched by score successfully:")\n    IO.inspect(hit.value)\n\n  :miss ->\n    IO.puts("Sorted Set \'test-sorted-set\' was not found in cache \'test-cache\'")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to fetch by score on sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetgetscore",children:"SortedSetGetScore"}),"\n",(0,n.jsx)(t.p,{children:"Gets an element's score from the sorted set, indexed by value."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"value"}),(0,n.jsx)(t.td,{children:"String | Bytes"}),(0,n.jsx)(t.td,{children:"The value to get the score of."})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Cache hit","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Score: number"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Cache miss (if the sorted set does not exist)"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nconst result = await cacheClient.sortedSetGetScore(cacheName, 'test-sorted-set', 'key1');\n\n// simplified style; assume the value was found\nconsole.log(`Element with value 'key1' has score: ${result.score()!}`);\n\n// pattern-matching style; safer for production code\nswitch (result.type) {\n  case CacheSortedSetGetScoreResponse.Hit:\n    console.log(`Element with value 'key1' has score: ${result.score()}`);\n    break;\n  case CacheSortedSetGetScoreResponse.Miss:\n    console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n    break;\n  case CacheSortedSetGetScoreResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetFetchGetScore on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let _score: f64 = cache_client\n      .sorted_set_get_score(cache_name, "sorted_set_name", "value1")\n      .await?\n      .try_into()\n      .expect("Expected a score!");',elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_get_score(client, "test-cache", "test-sorted-set", "key1") do\n  {:ok, hit} ->\n    IO.puts("Element with value \'key1\' has score: #{hit.score}")\n\n  :miss ->\n    IO.puts(\n      "Value \'key1\' not found in sorted set, or sorted set \'test-sorted-set\' was not found in cache \'test-cache\'"\n    )\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to get the score of \'key1\' in sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetgetscores",children:"SortedSetGetScores"}),"\n",(0,n.jsx)(t.p,{children:"Gets the scores associated with a list of elements from the sorted set, indexed by value."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"values"}),(0,n.jsx)(t.td,{children:"String[] | Bytes[]"}),(0,n.jsx)(t.td,{children:"An array of values to get the score of."})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Cache hit","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Elements() (returns hit/miss per element)","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Hit:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Score: number"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Miss"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Cache miss (if the sorted set does not exist)"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nconst result = await cacheClient.sortedSetGetScores(cacheName, 'test-sorted-set', ['key1', 'key2']);\n\n// simplified style; assume the value was found\nconsole.log(`Retrieved scores from sorted set: ${result.value()!}`);\n\n// pattern-matching style; safer for production code\nswitch (result.type) {\n  case CacheSortedSetGetScoresResponse.Hit:\n    console.log('Element scores retrieved successfully -');\n    result.valueMap().forEach((value, key) => {\n      console.log(`${key} : ${value}`);\n    });\n    break;\n  case CacheSortedSetGetScoresResponse.Miss:\n    console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n    break;\n  case CacheSortedSetGetScoresResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetFetchGetScores on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_get_scores(client, "test-cache", "test-sorted-set", [\n       "key1",\n       "key2"\n     ]) do\n  {:ok, hit} ->\n    IO.puts("Element scores retrieved successfully:")\n    IO.inspect(hit.value)\n\n  :miss ->\n    IO.puts("Sorted Set \'test-sorted-set\' was not found in cache \'test-cache\'")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to get the scores of values in sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetremoveelement",children:"SortedSetRemoveElement"}),"\n",(0,n.jsx)(t.p,{children:"Removes an element from a sorted set, indexed by value."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the set collection to be altered."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"value"}),(0,n.jsx)(t.td,{children:"String | Bytes"}),(0,n.jsx)(t.td,{children:"Value of the element to be removed by this operation."})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Success"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"await cacheClient.sortedSetPutElement(cacheName, 'test-sorted-set', 'test-value', 10);\nconst result = await cacheClient.sortedSetRemoveElement(cacheName, 'test-sorted-set', 'test-value');\nswitch (result.type) {\n  case CacheSortedSetRemoveElementResponse.Success:\n    console.log(\"Element with value 'test-value' removed successfully\");\n    break;\n  case CacheSortedSetRemoveElementResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetRemoveElement on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_element(\n    client,\n    "test-cache",\n    "test-sorted-set",\n    "key1",\n    10.0\n  )\n\ncase Momento.CacheClient.sorted_set_remove_element(\n       client,\n       "test-cache",\n       "test-sorted-set",\n       "key1"\n     ) do\n  {:ok, _} ->\n    IO.puts("Element with value \'key1\' removed successfully")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to remove value \'key1\' from sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetremoveelements",children:"SortedSetRemoveElements"}),"\n",(0,n.jsx)(t.p,{children:"Removes elements from a sorted set, indexed by values."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the set collection to be altered."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"values"}),(0,n.jsx)(t.td,{children:"String[] | Bytes[]"}),(0,n.jsx)(t.td,{children:"Values of the elements to be removed by this operation."})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"You can remove either one or a specific group of elements."}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Success"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n  ])\n);\nconst result = await cacheClient.sortedSetRemoveElements(cacheName, 'test-sorted-set', ['key1', 'key2']);\nswitch (result.type) {\n  case CacheSortedSetRemoveElementsResponse.Success:\n    console.log(\"Elements with value 'key1' and 'key2 removed successfully\");\n    break;\n  case CacheSortedSetRemoveElementsResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetRemoveElements on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  cache_client\n      .sorted_set_remove_elements(cache_name, "sorted_set_name", vec!["value1", "value2"])\n      .await?;\n  println!("Elements removed from sorted set");',elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_remove_elements(client, "test-cache", "test-sorted-set", [\n       "key1",\n       "key2"\n     ]) do\n  {:ok, _} ->\n    IO.puts("Elements with value \'key1\' and \'key2\' removed successfully")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting remove values from sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetgetrank",children:"SortedSetGetRank"}),"\n",(0,n.jsx)(t.p,{children:"What position is the element, in the specified sorted set?"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection to be altered."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"value"}),(0,n.jsx)(t.td,{children:"String | Bytes"}),(0,n.jsx)(t.td,{children:"Value of the element to retrieve the score of."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"order"}),(0,n.jsx)(t.td,{children:"Optional[Ascending | Descending]"}),(0,n.jsx)(t.td,{children:"The order in which sorted set will be sorted to determine the rank."})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Hit","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Rank: integer"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Miss"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"await cacheClient.sortedSetPutElements(\n  cacheName,\n  'test-sorted-set',\n  new Map<string, number>([\n    ['key1', 10],\n    ['key2', 20],\n    ['key3', 30],\n  ])\n);\nconst result = await cacheClient.sortedSetGetRank(cacheName, 'test-sorted-set', 'key2');\n\n// simplified style; assume the value was found\nconsole.log(`Element with value 'key1' has rank: ${result.rank()!}`);\n\n// pattern-matching style; safer for production code\nswitch (result.type) {\n  case CacheSortedSetGetRankResponse.Hit:\n    console.log(`Element with value 'key1' has rank: ${result.rank()}`);\n    break;\n  case CacheSortedSetGetRankResponse.Miss:\n    console.log(`Sorted Set 'test-sorted-set' was not found in cache '${cacheName}'`);\n    break;\n  case CacheSortedSetGetRankResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetFetchGetRank on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let _rank: u64 = cache_client\n      .sorted_set_get_rank(cache_name, "sorted_set_name", "value1")\n      .await?\n      .try_into()\n      .expect("Expected a rank!");',elixir:'{:ok, _} =\n  Momento.CacheClient.sorted_set_put_elements(client, "test-cache", "test-sorted-set", [\n    {"key1", 10.0},\n    {"key2", 20.0}\n  ])\n\ncase Momento.CacheClient.sorted_set_get_rank(client, "test-cache", "test-sorted-set", "key1") do\n  {:ok, hit} ->\n    IO.puts("Element with value \'key1\' has rank: #{hit.rank}")\n\n  :miss ->\n    IO.puts(\n      "Value \'key1\' not found in sorted set, or sorted set \'test-sorted-set\' was not found in cache \'test-cache\'"\n    )\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to get the rank of \'key1\' in sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetincrementscore",children:"SortedSetIncrementScore"}),"\n",(0,n.jsxs)(t.p,{children:["Adds to the score of an element. If the value is ",(0,n.jsx)(t.em,{children:"missing"})," from the sorted set, this method sets the value to the amount to increment by."]}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsx)(t.p,{children:"The resulting incremented score must be between -9223372036854775808 and 9223372036854775807, ie. a signed double 64-bit float. If not, there will be an error response."})}),"\n",(0,n.jsx)(t.p,{children:"Examples:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["When the element does not exist in the sorted set, ",(0,n.jsx)(t.code,{children:"SortedSetIncrementScore(cacheName, setName, value, 10)"})," will set the element's score to 10."]}),"\n",(0,n.jsxs)(t.li,{children:["When the existing element is a value",":score"," of \"{ 'KesselRun' : 12 }\" , ",(0,n.jsx)(t.code,{children:"SortedSetIncrementScore(cacheName, setName, value, 10)"})," will set the element's score to 22."]}),"\n"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"setName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection to be altered."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"value"}),(0,n.jsx)(t.td,{children:"String | Bytes"}),(0,n.jsx)(t.td,{children:"Value for the element to be incremented by this operation."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"amount"}),(0,n.jsx)(t.td,{children:"Number"}),(0,n.jsx)(t.td,{children:"The quantity to add to the score. May be positive, negative, or zero. Defaults to 1."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ttl"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/collection-ttl",children:"CollectionTTL object"})}),(0,n.jsx)(t.td,{children:"TTL for the sorted set collection. This TTL takes precedence over the TTL used when initializing a cache connection client."})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Success","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Value: number - the new value after incrementing"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"await cacheClient.sortedSetPutElement(cacheName, 'test-sorted-set', 'test-value', 10);\nconst result = await cacheClient.sortedSetIncrementScore(cacheName, 'test-sorted-set', 'test-value', 1);\nswitch (result.type) {\n  case CacheSortedSetIncrementScoreResponse.Success:\n    console.log(`Score for value 'test-value' incremented successfully. New score - ${result.score()}`);\n    break;\n  case CacheSortedSetIncrementScoreResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to call cacheSortedSetIncrementScore on sorted set 'test-sorted-set' in cache '${cacheName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:'case Momento.CacheClient.sorted_set_increment_score(\n       client,\n       "test-cache",\n       "test-sorted-set",\n       "key1",\n       1\n     ) do\n  {:ok, result} ->\n    IO.puts("Score for value \'key1\' incremented successfully. New score: #{result.score}")\n\n  {:error, error} ->\n    IO.puts(\n      "An error occurred while attempting to increment the score of \'key1\' in sorted set \'test-sorted-set\' in cache \'test-cache\': #{error.error_code}"\n    )\n\n    raise error\nend',swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h2,{id:"sortedsetelement",children:"SortedSetElement"}),"\n",(0,n.jsx)(t.p,{children:"A value and score makes up each element in a sorted set."}),"\n",(0,n.jsxs)(t.p,{children:["Example:\n",(0,n.jsx)(t.code,{children:'{ "TomHocusXaster" : 1138 }'})]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Value"}),(0,n.jsx)(t.td,{children:"String | Bytes"}),(0,n.jsx)(t.td,{children:"Value for the sorted set element."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Score"}),(0,n.jsx)(t.td,{children:"Signed double 64-bit float"}),(0,n.jsx)(t.td,{children:"Score the element."})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"A SortedSetElement can exist by itself or as part of an array of SortedSetElements."}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetlength",children:"SortedSetLength"}),"\n",(0,n.jsx)(t.p,{children:"Get the number of entries in a sorted set collection."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"sortedSetName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection to be checked."})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Hit","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"length()"}),": Number"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Miss"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:'  let _length: u32 = cache_client\n      .sorted_set_length(cache_name, "sorted_set_name")\n      .await?\n      .try_into()\n      .expect("Expected a list length!");',elixir:"",swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"sortedsetlengthbyscore",children:"SortedSetLengthByScore"}),"\n",(0,n.jsx)(t.p,{children:"For an existing sorted set collection, it finds all of the values between the specified min and max score and returns the length."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"cacheName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the cache."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"sortedSetName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the sorted set collection to be checked."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"minScore"}),(0,n.jsx)(t.td,{children:"Optional[double]"}),(0,n.jsxs)(t.td,{children:["The inclusive low score of the results. Default is ",(0,n.jsx)(t.code,{children:"-inf"}),", ie include through the lowest score."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"maxScore"}),(0,n.jsx)(t.td,{children:"Optional[double]"}),(0,n.jsxs)(t.td,{children:["The inclusive high score of the results. Default is ",(0,n.jsx)(t.code,{children:"+inf"}),", ie include through the highest score."]})]})]})]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Method response object"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Hit","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"length()"}),": Number"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Miss"}),"\n",(0,n.jsx)(t.li,{children:"Error"}),"\n"]}),(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"/cache/develop/api-reference/response-objects",children:"response objects"})," for specific information."]})]}),"\n",(0,n.jsx)(c.r,{js:"",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},9365:(e,t,s)=>{s.d(t,{A:()=>o});s(6540);var n=s(4164);const r={tabItem:"tabItem_Ymn6"};var c=s(4848);function o(e){let{children:t,hidden:s,className:o}=e;return(0,c.jsx)("div",{role:"tabpanel",className:(0,n.A)(r.tabItem,o),hidden:s,children:t})}},1470:(e,t,s)=>{s.d(t,{A:()=>g});var n=s(6540),r=s(4164),c=s(3104),o=s(6347),l=s(205),i=s(7485),d=s(1682),a=s(679);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:s}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:s,attributes:n,default:r}}=e;return{value:t,label:s,attributes:n,default:r}}))}(s);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,s])}function j(e){let{value:t,tabValues:s}=e;return s.some((e=>e.value===t))}function x(e){let{queryString:t=!1,groupId:s}=e;const r=(0,o.W6)(),c=function(e){let{queryString:t=!1,groupId:s}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:t,groupId:s});return[(0,i.aZ)(c),(0,n.useCallback)((e=>{if(!c)return;const t=new URLSearchParams(r.location.search);t.set(c,e),r.replace({...r.location,search:t.toString()})}),[c,r])]}function m(e){const{defaultValue:t,queryString:s=!1,groupId:r}=e,c=u(e),[o,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!j({value:t,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=s.find((e=>e.default))??s[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:c}))),[d,h]=x({queryString:s,groupId:r}),[m,p]=function(e){let{groupId:t}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,c]=(0,a.Dv)(s);return[r,(0,n.useCallback)((e=>{s&&c.set(e)}),[s,c])]}({groupId:r}),f=(()=>{const e=d??m;return j({value:e,tabValues:c})?e:null})();(0,l.A)((()=>{f&&i(f)}),[f]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!j({value:e,tabValues:c}))throw new Error(`Can't select invalid tab value=${e}`);i(e),h(e),p(e)}),[h,p,c]),tabValues:c}}var p=s(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var S=s(4848);function v(e){let{className:t,block:s,selectedValue:n,selectValue:o,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:d}=(0,c.a_)(),a=e=>{const t=e.currentTarget,s=i.indexOf(t),r=l[s].value;r!==n&&(d(t),o(r))},h=e=>{let t=null;switch(e.key){case"Enter":a(e);break;case"ArrowRight":{const s=i.indexOf(e.currentTarget)+1;t=i[s]??i[0];break}case"ArrowLeft":{const s=i.indexOf(e.currentTarget)-1;t=i[s]??i[i.length-1];break}}t?.focus()};return(0,S.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":s},t),children:l.map((e=>{let{value:t,label:s,attributes:c}=e;return(0,S.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>i.push(e),onKeyDown:h,onClick:a,...c,className:(0,r.A)("tabs__item",f.tabItem,c?.className,{"tabs__item--active":n===t}),children:s??t},t)}))})}function b(e){let{lazy:t,children:s,selectedValue:c}=e;const o=(Array.isArray(s)?s:[s]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===c));return e?(0,n.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,S.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==c})))})}function y(e){const t=m(e);return(0,S.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,S.jsx)(v,{...t,...e}),(0,S.jsx)(b,{...t,...e})]})}function g(e){const t=(0,p.A)();return(0,S.jsx)(y,{...e,children:h(e.children)},String(t))}},1441:(e,t,s)=>{s(6540)},5347:(e,t,s)=>{s.d(t,{r:()=>l});var n=s(1470),r=s(9365),c=s(1432),o=(s(6540),s(4848));const l=e=>{let{js:t,python:s,java:l,kotlin:i,go:d,csharp:a,php:h,rust:u,ruby:j,elixir:x,swift:m,dart:p,cli:f}=e;return t||s||l||i||d||a||h||u||j||x||m||p||f?(0,o.jsxs)(n.A,{children:[t&&(0,o.jsx)(r.A,{value:"js",label:"JavaScript",children:(0,o.jsx)(c.A,{language:"js",children:t})}),s&&(0,o.jsx)(r.A,{value:"python",label:"Python",children:(0,o.jsx)(c.A,{language:"python",children:s})}),l&&(0,o.jsx)(r.A,{value:"java",label:"Java",children:(0,o.jsx)(c.A,{language:"java",children:l})}),i&&(0,o.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,o.jsx)(c.A,{language:"kotlin",children:i})}),d&&(0,o.jsx)(r.A,{value:"go",label:"Go",children:(0,o.jsx)(c.A,{language:"go",children:d})}),a&&(0,o.jsx)(r.A,{value:"csharp",label:"C#",children:(0,o.jsx)(c.A,{language:"csharp",children:a})}),h&&(0,o.jsx)(r.A,{value:"php",label:"PHP",children:(0,o.jsx)(c.A,{language:"php",children:h})}),u&&(0,o.jsx)(r.A,{value:"rust",label:"Rust",children:(0,o.jsx)(c.A,{language:"rust",children:u})}),j&&(0,o.jsx)(r.A,{value:"ruby",label:"Ruby",children:(0,o.jsx)(c.A,{language:"ruby",children:j})}),x&&(0,o.jsx)(r.A,{value:"elixir",label:"Elixir",children:(0,o.jsx)(c.A,{language:"elixir",children:x})}),m&&(0,o.jsx)(r.A,{value:"swift",label:"Swift",children:(0,o.jsx)(c.A,{language:"swift",children:m})}),p&&(0,o.jsx)(r.A,{value:"dart",label:"Dart",children:(0,o.jsx)(c.A,{language:"dart",children:p})}),f&&(0,o.jsx)(r.A,{value:"cli",label:"CLI",children:(0,o.jsx)(c.A,{language:"cli",children:f})})]}):null}}}]);