"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[9162],{8499:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var s=n(4848),a=n(8453),t=(n(1441),n(5347));const l={sidebar_position:2,sidebar_label:"API Reference",title:"Leaderboards API reference",description:"Learn how to interact programmatically with the Momento Leaderboards API.",hide_table_of_contents:!1},o="Using Momento Leaderboards",i={id:"leaderboards/api-reference/index",title:"Leaderboards API reference",description:"Learn how to interact programmatically with the Momento Leaderboards API.",source:"@site/docs/leaderboards/api-reference/index.mdx",sourceDirName:"leaderboards/api-reference",slug:"/leaderboards/api-reference/",permalink:"/leaderboards/api-reference/",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/leaderboards/api-reference/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"API Reference",title:"Leaderboards API reference",description:"Learn how to interact programmatically with the Momento Leaderboards API.",hide_table_of_contents:!1},sidebar:"leaderboardSidebar",previous:{title:"Momento Leaderboards",permalink:"/leaderboards/"},next:{title:"Auth",permalink:"/leaderboards/api-reference/auth"}},d={},c=[{value:"Leaderboard Client Methods",id:"leaderboard-client-methods",level:2},{value:"Create Leaderboard Client",id:"create-leaderboard-client",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Optional Parameters",id:"optional-parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Create a Leaderboard",id:"create-a-leaderboard",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Optional Parameters",id:"optional-parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Leaderboard Methods",id:"leaderboard-methods",level:2},{value:"Upsert elements",id:"upsert-elements",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Optional Parameters",id:"optional-parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Fetch elements by score",id:"fetch-elements-by-score",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Optional Parameters",id:"optional-parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Fetch elements by rank",id:"fetch-elements-by-rank",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Optional Parameters",id:"optional-parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Fetch elements by ID",id:"fetch-elements-by-id",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Optional Parameters",id:"optional-parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Get leaderboard length",id:"get-leaderboard-length",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Optional Parameters",id:"optional-parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Remove elements",id:"remove-elements",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Optional Parameters",id:"optional-parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Delete leaderboard",id:"delete-leaderboard",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Optional Parameters",id:"optional-parameters-8",level:4},{value:"Returns",id:"returns-8",level:4}];function h(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"using-momento-leaderboards",children:"Using Momento Leaderboards"}),"\n",(0,s.jsx)(r.p,{children:"Momento Leaderboards is a first-class service with purpose-built APIs that supports leaderboards with tens of millions of items and rapid ingestion/querying/updates."}),"\n",(0,s.jsx)(r.h2,{id:"leaderboard-client-methods",children:"Leaderboard Client Methods"}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsxs)("div",{class:"col col--6",children:[(0,s.jsx)(r.h3,{id:"create-leaderboard-client",children:"Create Leaderboard Client"}),(0,s.jsx)(r.p,{children:"To create and interact with leaderboards, you must first create a LeaderboardClient."}),(0,s.jsx)(r.h4,{id:"parameters",children:"Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"configuration"})," - ",(0,s.jsx)(r.em,{children:"LeaderboardConfiguration"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Options for configuring your leaderboard client. For more information, see ",(0,s.jsx)(r.a,{href:"/cache/develop/basics/client-configuration-objects",children:"SDK Configuration Objects"}),"."]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"credentialProvider"})," - ",(0,s.jsx)(r.em,{children:"CredentialProvider"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["See ",(0,s.jsx)(r.a,{href:"/cache/develop#instantiating-credential-providers-using-momento-api-keys",children:"Instantiating CredentialProviders"})," for more information on using your Momento API key"]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"optional-parameters",children:"Optional Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"returns",children:"Returns"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.p,{children:"PreviewLeaderboardClient object capable of creating new leaderboards and interacting with existing ones."})]}),(0,s.jsx)("div",{class:"col col--6",children:(0,s.jsx)(t.r,{js:"new PreviewLeaderboardClient({\n  configuration: LeaderboardConfigurations.Laptop.v1(),\n  credentialProvider: CredentialProvider.fromEnvironmentVariable({\n    environmentVariableName: 'MOMENTO_API_KEY',\n  }),\n});",python:"",java:"",kotlin:"",go:'credentialProvider, err := auth.NewEnvMomentoTokenProvider("MOMENTO_API_KEY")\nif err != nil {\n\tpanic(err)\n}\n\nleaderboardClient, err = momento.NewPreviewLeaderboardClient(\n\tconfig.LeaderboardDefault(),\n\tcredentialProvider,\n)\nif err != nil {\n\tpanic(err)\n}',csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsxs)("div",{class:"col col--6",children:[(0,s.jsx)(r.h3,{id:"create-a-leaderboard",children:"Create a Leaderboard"}),(0,s.jsx)(r.p,{children:"Use a LeaderboardClient to create a leaderboard by specifying a cache and leaderboard name."}),(0,s.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"cacheName"})," - ",(0,s.jsx)(r.em,{children:"string"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Which cache to create the leaderboard in"}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"leaderboardName"})," - ",(0,s.jsx)(r.em,{children:"string"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"What to name the leaderboard"}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"optional-parameters-1",children:"Optional Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"returns-1",children:"Returns"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:["Leaderboard object or ",(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#error",children:"Error"})]})]}),(0,s.jsx)("div",{class:"col col--6",children:(0,s.jsx)(t.r,{js:"// You can create multiple leaderboards using the same leaderboard client\n// but with different cache and leaderboard names\nleaderboardClient.leaderboard(cacheName, 'momento-leaderboard');\nleaderboardClient.leaderboard(cacheName, 'acorns-leaderboard');\n\n// Leaderboard and cache names must be non-empty strings\ntry {\n  leaderboardClient.leaderboard(cacheName, '   ');\n} catch (error) {\n  console.log('Expected error creating a leaderboard with invalid leaderboard name:', error);\n}",python:"",java:"",kotlin:"",go:'leaderboard, err := leaderboardClient.Leaderboard(ctx, &momento.LeaderboardRequest{\n\tCacheName:       cacheName,\n\tLeaderboardName: "leaderboard",\n})\nif err != nil {\n\tpanic(err)\n}',csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"leaderboard-methods",children:"Leaderboard Methods"}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsxs)("div",{class:"col col--6",children:[(0,s.jsx)(r.h3,{id:"upsert-elements",children:"Upsert elements"}),(0,s.jsx)(r.p,{children:"Inserts elements if they do not already exist in the leaderboard. Updates elements if they do already exist in the leaderboard. There are no partial failures; an upsert call will either succeed or fail."}),(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"Upsert is implemented as a batched operation, so for large leaderboards, you can upsert in batches of up to 8192 elements. "}),(0,s.jsx)(t.r,{js:"// To upsert a large number of elements, you must upsert\n// in batches of up to 8192 elements at a time.\n// This example shows how to paginate for a large value of `totalNumElements`, such as `20000`.\nconst elements = [...Array(totalNumElements).keys()].map(i => {\n  return {id: i + 1, score: i * Math.random()};\n});\nfor (let i = 0; i < totalNumElements; i += 8192) {\n  // Create a Map containing 8192 elements at a time\n  const batch = new Map(elements.slice(i, i + 8192).map(obj => [obj['id'], obj['score']]));\n\n  // Then upsert one batch at a time until all elements have been ingested\n  const result = await leaderboard.upsert(batch);\n  if (result instanceof LeaderboardUpsert.Error) {\n    console.log(`Error upserting batch [${i}, ${i + 8192})`);\n  }\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})]}),(0,s.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"elements"})," - ",(0,s.jsx)(r.em,{children:"Dictionary"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Dictionary of (id, score) pairs to upsert."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"id: integer"}),"\n",(0,s.jsx)(r.li,{children:"score: double"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"The id can be a player identifier, session identifier, browser identifier or any other kind of identifier you want to use for this scoreboard. The full unsigned 64 bit range is allowed here, between 0 and 2^63-1 inclusive."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"An id can only appear in a leaderboard one time, meaning you can't have two scores for one player unless that player has two ids!"}),"\n"]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"optional-parameters-2",children:"Optional Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"returns-2",children:"Returns"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.p,{children:"One of the following:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#success",children:"LeaderboardUpsert.Success"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#error",children:"LeaderboardUpsert.Error"})}),"\n"]})]}),(0,s.jsx)("div",{class:"col col--6",children:(0,s.jsx)(t.r,{js:"// Upsert a set of elements as a Map\nconst elements1: Map<number, number> = new Map([\n  [123, 100.0],\n  [234, 200.0],\n  [345, 300.0],\n  [456, 400.0],\n]);\nconst result1 = await leaderboard.upsert(elements1);\nif (result1 instanceof LeaderboardUpsert.Success) {\n  console.log('Successfully upserted elements to leaderboard');\n} else if (result1 instanceof LeaderboardUpsert.Error) {\n  console.log('Upsert error:', result1.message());\n  throw new Error(\n    `An error occurred while attempting to call upsert on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result1.errorCode()}: ${result1.message()}`\n  );\n}\n\n// Or upsert a set of elements as a Record\nconst elements2: Record<number, number> = {\n  567: 500,\n  678: 600,\n  789: 700,\n  890: 800,\n};\nconst result2 = await leaderboard.upsert(elements2);\nif (result2 instanceof LeaderboardUpsert.Success) {\n  console.log('Successfully upserted elements to leaderboard');\n} else if (result2 instanceof LeaderboardUpsert.Error) {\n  console.log('Upsert error:', result2.message());\n  throw new Error(\n    `An error occurred while attempting to call upsert on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result2.errorCode()}: ${result2.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"upsertElements := []momento.LeaderboardUpsertElement{\n\t{Id: 123, Score: 10.33},\n\t{Id: 456, Score: 3333},\n\t{Id: 789, Score: 5678.9},\n}\n_, err := leaderboard.Upsert(ctx, momento.LeaderboardUpsertRequest{Elements: upsertElements})\nif err != nil {\n\tpanic(err)\n}",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsxs)("div",{class:"col col--6",children:[(0,s.jsx)(r.h3,{id:"fetch-elements-by-score",children:"Fetch elements by score"}),(0,s.jsx)(r.p,{children:"Fetches elements that fall within the specified min and max scores."}),(0,s.jsxs)(r.p,{children:["Elements with the same score will be returned in alphanumerical order based on their ID (e.g. IDs of elements with the same score would be returned in the order ",(0,s.jsx)(r.code,{children:"[1, 10, 123, 2, 234, ...]"})," rather than ",(0,s.jsx)(r.code,{children:"[1, 2, 10, 123, 234, ...]"}),")."]}),(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"FetchByScore is implemented as a batch operation, so for large leaderboards, you can fetch in batches of up to 8192 elements."}),(0,s.jsxs)(r.p,{children:["You can page through multiple elements that fall within the requested score range using the ",(0,s.jsx)(r.code,{children:"offset"})," parameter until you receive an empty list, which indicates the end of the requested elements."]}),(0,s.jsx)(t.r,{js:"// Use the offset option to paginate through your results if your leaderboard\n// has more than 8192 elements.\n// This example shows how to paginate for a large value of `totalNumElements`, such as `20000`.\nfor (let offset = 0; offset < totalNumElements; offset += 8192) {\n  const result = await leaderboard.fetchByScore({offset});\n  if (result instanceof LeaderboardFetch.Success) {\n    processBatch(result.values());\n  } else if (result instanceof LeaderboardFetch.Error) {\n    console.log(\n      `Error fetching batch by score [${offset}, ${offset + 8192}) (${result.errorCode()}: ${result.message()})`\n    );\n  }\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})]}),(0,s.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"optional-parameters-3",children:"Optional Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"minScore"})," - ",(0,s.jsx)(r.em,{children:"double"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Inclusive lower bound for the score range. Defaults to ",(0,s.jsx)(r.code,{children:"-inf"}),"."]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"maxScore"})," - ",(0,s.jsx)(r.em,{children:"double"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Exclusive upper bound for the score range. Defaults to ",(0,s.jsx)(r.code,{children:"+inf"}),"."]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"order"})," - ",(0,s.jsx)(r.em,{children:"LeaderboardOrder enum"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Enum values: Ascending, Descending"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"The order to fetch the elements in. Defaults to ascending, meaning 0 is the lowest-scoring rank."}),"\n"]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"offset"})," - ",(0,s.jsx)(r.em,{children:"integer"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"The number of elements to skip before returning the first element. Defaults to 0."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Note: this is not the score of the first element to return, but the number of elements of the result set to skip before returning the first element."}),"\n"]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"count"})," - ",(0,s.jsx)(r.em,{children:"integer"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"The maximum number of elements to return. Defaults to 8192, which is the maximum that can be fetched per request."}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"returns-3",children:"Returns"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.p,{children:"One of the following:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#success",children:"LeaderboardFetch.Success"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#error",children:"LeaderboardFetch.Error"})}),"\n"]})]}),(0,s.jsx)("div",{class:"col col--6",children:(0,s.jsx)(t.r,{js:"// By default, FetchByScore will fetch the elements from the entire score range\n// with zero offset in ascending order. It can return 8192 elements at a time.\nconst result1 = await leaderboard.fetchByScore();\nif (result1 instanceof LeaderboardFetch.Success) {\n  console.log('Successfully fetched elements using open score range:');\n  result1.values().forEach(element => {\n    console.log(`\\tId: ${element.id} | Rank: ${element.rank} | Score: ${element.score}`);\n  });\n} else if (result1 instanceof LeaderboardFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call fetchByScore with no options on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result1.errorCode()}: ${result1.message()}`\n  );\n}\n\n// Example specifying all FetchByScore options. You can provide any subset of these options\n// to modify your FetchByScore request.\nconst result2 = await leaderboard.fetchByScore({\n  minScore: 10,\n  maxScore: 600,\n  order: LeaderboardOrder.Descending,\n  offset: 2,\n  count: 10,\n});\nif (result2 instanceof LeaderboardFetch.Success) {\n  console.log('Successfully fetched elements by score using all options:');\n  result2.values().forEach(element => {\n    console.log(`\\tId: ${element.id} | Rank: ${element.rank} | Score: ${element.score}`);\n  });\n} else if (result2 instanceof LeaderboardFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call fetchByScore with all options on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result2.errorCode()}: ${result2.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:'minScore := 150.0\nmaxScore := 3000.0\noffset := uint32(1)\ncount := uint32(2)\nfetchOrder := momento.ASCENDING\nfetchByScoreResponse, err := leaderboard.FetchByScore(ctx, momento.LeaderboardFetchByScoreRequest{\n\tMinScore: &minScore,\n\tMaxScore: &maxScore,\n\tOffset:   &offset,\n\tCount:    &count,\n\tOrder:    &fetchOrder,\n})\nif err != nil {\n\tpanic(err)\n}\nswitch r := fetchByScoreResponse.(type) {\ncase *responses.LeaderboardFetchSuccess:\n\tfmt.Printf("Successfully fetched elements by score:\\n")\n\tfor _, element := range r.Values() {\n\t\tfmt.Printf("ID: %d, Score: %f, Rank: %d\\n", element.Id, element.Score, element.Rank)\n\t}\n}',csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsxs)("div",{class:"col col--6",children:[(0,s.jsx)(r.h3,{id:"fetch-elements-by-rank",children:"Fetch elements by rank"}),(0,s.jsx)(r.p,{children:"Fetches elements that fall within the specified min and max ranks."}),(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"For large leaderboards, you will need to fetch in batches of up to 8192 elements."}),(0,s.jsx)(t.r,{js:"// Use the startRank and endRank options to paginate through your leaderboard\n// if your leaderboard has more than 8192 elements\n// This example shows how to paginate for a large value of `totalNumElements`, such as `20000`.\nfor (let rank = 0; rank < totalNumElements; rank += 8192) {\n  const result = await leaderboard.fetchByRank(rank, rank + 8192, {order: LeaderboardOrder.Descending});\n  if (result instanceof LeaderboardFetch.Success) {\n    processBatch(result.values());\n  } else if (result instanceof LeaderboardFetch.Error) {\n    console.log(\n      `Error fetching batch by rank [${rank}, ${rank + 8192}) (${result.errorCode()}: ${result.message()})`\n    );\n  }\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})]}),(0,s.jsx)(r.h4,{id:"parameters-4",children:"Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"startRank"})," - ",(0,s.jsx)(r.em,{children:"integer"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Inclusive lower bound for the rank range. Defaults to 0."}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"endRank"})," - ",(0,s.jsx)(r.em,{children:"integer"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Exclusive upper bound for the rank range. Defaults to ",(0,s.jsx)(r.code,{children:"startRank"})," + 8192."]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"optional-parameters-4",children:"Optional Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"order"})," - ",(0,s.jsx)(r.em,{children:"LeaderboardOrder enum"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Enum values: Ascending, Descending"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"The order to fetch the elements in. Defaults to ascending, meaning 0 is the lowest-scoring rank."}),"\n"]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"returns-4",children:"Returns"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.p,{children:"One of the following:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#success",children:"LeaderboardFetch.Success"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#error",children:"LeaderboardFetch.Error"})}),"\n"]})]}),(0,s.jsx)("div",{class:"col col--6",children:(0,s.jsx)(t.r,{js:"// By default, FetchByRank will fetch the elements in the range [startRank, endRank)\n// in ascending order, meaning rank 0 is for the lowest score.\nconst result1 = await leaderboard.fetchByRank(0, 10);\nif (result1 instanceof LeaderboardFetch.Success) {\n  console.log('Successfully fetched elements in rank range [0,10)');\n  result1.values().forEach(element => {\n    console.log(`\\tId: ${element.id} | Rank: ${element.rank} | Score: ${element.score}`);\n  });\n} else if (result1 instanceof LeaderboardFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call fetchByRank with no options on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result1.errorCode()}: ${result1.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:'fetchOrder := momento.ASCENDING\nfetchByRankResponse, err := leaderboard.FetchByRank(ctx, momento.LeaderboardFetchByRankRequest{\n\tStartRank: 0,\n\tEndRank:   100,\n\tOrder:     &fetchOrder,\n})\nif err != nil {\n\tpanic(err)\n}\nswitch r := fetchByRankResponse.(type) {\ncase *responses.LeaderboardFetchSuccess:\n\tfmt.Printf("Successfully fetched elements by rank:\\n")\n\tfor _, element := range r.Values() {\n\t\tfmt.Printf("ID: %d, Score: %f, Rank: %d\\n", element.Id, element.Score, element.Rank)\n\t}\n}',csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsxs)("div",{class:"col col--6",children:[(0,s.jsx)(r.h3,{id:"fetch-elements-by-id",children:"Fetch elements by ID"}),(0,s.jsx)(r.p,{children:"Fetches elements given a list of element IDs."}),(0,s.jsx)(r.h4,{id:"parameters-5",children:"Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"ids"})," - ",(0,s.jsx)(r.em,{children:"List"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"List of integers representing the ids of the elements to fetch."}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"optional-parameters-5",children:"Optional Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"order"})," - ",(0,s.jsx)(r.em,{children:"LeaderboardOrder enum"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Enum values: Ascending, Descending"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"The order to fetch the elements in. Defaults to ascending, meaning 0 is the lowest-scoring rank."}),"\n"]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"returns-5",children:"Returns"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.p,{children:"One of the following:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#success",children:"LeaderboardFetch.Success"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#error",children:"LeaderboardFetch.Error"})}),"\n"]})]}),(0,s.jsx)("div",{class:"col col--6",children:(0,s.jsx)(t.r,{js:"// Provide a list of element IDs to get their ranks in ascending or descending order\nconst result = await leaderboard.getRank([123, 456, 789], {\n  order: LeaderboardOrder.Descending,\n});\nif (result instanceof LeaderboardFetch.Success) {\n  console.log('Successfully fetched the rank of 3 elements:');\n  result.values().forEach(element => {\n    console.log(`\\tId: ${element.id} | Rank: ${element.rank} | Score: ${element.score}`);\n  });\n} else if (result instanceof LeaderboardFetch.Error) {\n  throw new Error(\n    `An error occurred while attempting to call getRank on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result.errorCode()}: ${result.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:'getRankResponse, err := leaderboard.GetRank(ctx, momento.LeaderboardGetRankRequest{\n\tIds: []uint32{123, 456},\n})\nif err != nil {\n\tpanic(err)\n}\nswitch r := getRankResponse.(type) {\ncase *responses.LeaderboardFetchSuccess:\n\tfmt.Printf("Successfully fetched elements by ID:\\n")\n\tfor _, element := range r.Values() {\n\t\tfmt.Printf("ID: %d, Score: %f, Rank: %d\\n", element.Id, element.Score, element.Rank)\n\t}\n}',csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsxs)("div",{class:"col col--6",children:[(0,s.jsx)(r.h3,{id:"get-leaderboard-length",children:"Get leaderboard length"}),(0,s.jsxs)(r.p,{children:["Gets the number of entries in the leaderboard. The leaderboard name is inferred from the ",(0,s.jsx)(r.code,{children:"Leaderboard"})," object."]}),(0,s.jsx)(r.h4,{id:"parameters-6",children:"Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"optional-parameters-6",children:"Optional Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"returns-6",children:"Returns"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.p,{children:"One of the following:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#success",children:"LeaderboardLength.Success"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#error",children:"LeaderboardLength.Error"})}),"\n"]})]}),(0,s.jsx)("div",{class:"col col--6",children:(0,s.jsx)(t.r,{js:"const result = await leaderboard.length();\nif (result instanceof LeaderboardLength.Success) {\n  console.log('Successfully retrieved leaderboard length:', result.length());\n} else if (result instanceof LeaderboardLength.Error) {\n  throw new Error(\n    `An error occurred while attempting to call length on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result.errorCode()}: ${result.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:'lengthResponse, err := leaderboard.Length(ctx)\nif err != nil {\n\tpanic(err)\n}\nswitch r := lengthResponse.(type) {\ncase *responses.LeaderboardLengthSuccess:\n\tfmt.Printf("Leaderboard length: %d\\n", r.Length())\n}',csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsxs)("div",{class:"col col--6",children:[(0,s.jsx)(r.h3,{id:"remove-elements",children:"Remove elements"}),(0,s.jsx)(r.p,{children:"Removes elements with the specified IDs."}),(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"For large leaderboards, you will need to remove in batches of up to 8192 elements."}),(0,s.jsx)(t.r,{js:"// You can remove batches of 8192 elements at a time.\n// This example shows how to paginate for a large value of `totalNumElements`, such as `20000`.\nconst ids = [...Array(totalNumElements).keys()];\nfor (let i = 0; i < totalNumElements; i += 8192) {\n  const result = await leaderboard.removeElements(ids.slice(i, i + 8192));\n  if (result instanceof LeaderboardRemoveElements.Error) {\n    console.log(`Error removing batch [${i}, ${i + 8192}) (${result.errorCode()}: ${result.message()})`);\n  }\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})]}),(0,s.jsx)(r.h4,{id:"parameters-7",children:"Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"ids"})," - ",(0,s.jsx)(r.em,{children:"List"})]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"A list of ids for the elements you want to remove."}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"optional-parameters-7",children:"Optional Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"returns-7",children:"Returns"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.p,{children:"One of the following:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#success",children:"LeaderboardRemoveElements.Success"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#error",children:"LeaderboardRemoveElements.Error"})}),"\n"]})]}),(0,s.jsx)("div",{class:"col col--6",children:(0,s.jsx)(t.r,{js:"// Provide a list of element IDs to delete those elements\nconst result = await leaderboard.removeElements([123, 456, 789]);\nif (result instanceof LeaderboardRemoveElements.Success) {\n  console.log('Successfully removed elements');\n} else if (result instanceof LeaderboardRemoveElements.Error) {\n  throw new Error(\n    `An error occurred while attempting to call removeElements on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result.errorCode()}: ${result.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"_, err := leaderboard.RemoveElements(ctx, momento.LeaderboardRemoveElementsRequest{Ids: []uint32{123, 456}})\nif err != nil {\n\tpanic(err)\n}",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsxs)("div",{class:"col col--6",children:[(0,s.jsx)(r.h3,{id:"delete-leaderboard",children:"Delete leaderboard"}),(0,s.jsxs)(r.p,{children:["Deletes the leaderboard. The leaderboard name is inferred from the ",(0,s.jsx)(r.code,{children:"Leaderboard"})," object."]}),(0,s.jsx)(r.h4,{id:"parameters-8",children:"Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"optional-parameters-8",children:"Optional Parameters"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h4,{id:"returns-8",children:"Returns"}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.p,{children:"One of the following:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#success",children:"LeaderboardDelete.Success"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/leaderboards/api-reference/response-objects#error",children:"LeaderboardDelete.Error"})}),"\n"]})]}),(0,s.jsx)("div",{class:"col col--6",children:(0,s.jsx)(t.r,{js:"const result = await leaderboard.delete();\nif (result instanceof LeaderboardDelete.Success) {\n  console.log('Successfully deleted the leaderboard');\n} else if (result instanceof LeaderboardDelete.Error) {\n  throw new Error(\n    `An error occurred while attempting to call delete on leaderboard 'momento-leaderboard' in cache '${cacheName}': ${result.errorCode()}: ${result.message()}`\n  );\n}",python:"",java:"",kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""})})]}),"\n",(0,s.jsx)(r.hr,{})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>l});n(6540);var s=n(4164);const a={tabItem:"tabItem_Ymn6"};var t=n(4848);function l(e){let{children:r,hidden:n,className:l}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,l),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>y});var s=n(6540),a=n(4164),t=n(3104),l=n(6347),o=n(205),i=n(7485),d=n(1682),c=n(679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:n}=e;return(0,s.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:n,attributes:s,default:a}}=e;return{value:r,label:n,attributes:s,default:a}}))}(n);return function(e){const r=(0,d.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function m(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function p(e){let{queryString:r=!1,groupId:n}=e;const a=(0,l.W6)(),t=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,i.aZ)(t),(0,s.useCallback)((e=>{if(!t)return;const r=new URLSearchParams(a.location.search);r.set(t,e),a.replace({...a.location,search:r.toString()})}),[t,a])]}function f(e){const{defaultValue:r,queryString:n=!1,groupId:a}=e,t=u(e),[l,i]=(0,s.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!m({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:r,tabValues:t}))),[d,h]=p({queryString:n,groupId:a}),[f,j]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[a,t]=(0,c.Dv)(n);return[a,(0,s.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:a}),x=(()=>{const e=d??f;return m({value:e,tabValues:t})?e:null})();(0,o.A)((()=>{x&&i(x)}),[x]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);i(e),h(e),j(e)}),[h,j,t]),tabValues:t}}var j=n(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(4848);function g(e){let{className:r,block:n,selectedValue:s,selectValue:l,tabValues:o}=e;const i=[],{blockElementScrollPositionUntilNextRender:d}=(0,t.a_)(),c=e=>{const r=e.currentTarget,n=i.indexOf(r),a=o[n].value;a!==s&&(d(r),l(a))},h=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;r=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;r=i[n]??i[i.length-1];break}}r?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},r),children:o.map((e=>{let{value:r,label:n,attributes:t}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===r?0:-1,"aria-selected":s===r,ref:e=>i.push(e),onKeyDown:h,onClick:c,...t,className:(0,a.A)("tabs__item",x.tabItem,t?.className,{"tabs__item--active":s===r}),children:n??r},r)}))})}function v(e){let{lazy:r,children:n,selectedValue:a}=e;const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=t.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:t.map(((e,r)=>(0,s.cloneElement)(e,{key:r,hidden:e.props.value!==a})))})}function w(e){const r=f(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",x.tabList),children:[(0,b.jsx)(g,{...r,...e}),(0,b.jsx)(v,{...r,...e})]})}function y(e){const r=(0,j.A)();return(0,b.jsx)(w,{...e,children:h(e.children)},String(r))}},1441:(e,r,n)=>{n(6540)},5347:(e,r,n)=>{n.d(r,{r:()=>o});var s=n(1470),a=n(9365),t=n(1432),l=(n(6540),n(4848));const o=e=>{let{js:r,python:n,java:o,kotlin:i,go:d,csharp:c,php:h,rust:u,ruby:m,elixir:p,swift:f,dart:j,cli:x}=e;return r||n||o||i||d||c||h||u||m||p||f||j||x?(0,l.jsxs)(s.A,{children:[r&&(0,l.jsx)(a.A,{value:"js",label:"JavaScript",children:(0,l.jsx)(t.A,{language:"js",children:r})}),n&&(0,l.jsx)(a.A,{value:"python",label:"Python",children:(0,l.jsx)(t.A,{language:"python",children:n})}),o&&(0,l.jsx)(a.A,{value:"java",label:"Java",children:(0,l.jsx)(t.A,{language:"java",children:o})}),i&&(0,l.jsx)(a.A,{value:"kotlin",label:"Kotlin",children:(0,l.jsx)(t.A,{language:"kotlin",children:i})}),d&&(0,l.jsx)(a.A,{value:"go",label:"Go",children:(0,l.jsx)(t.A,{language:"go",children:d})}),c&&(0,l.jsx)(a.A,{value:"csharp",label:"C#",children:(0,l.jsx)(t.A,{language:"csharp",children:c})}),h&&(0,l.jsx)(a.A,{value:"php",label:"PHP",children:(0,l.jsx)(t.A,{language:"php",children:h})}),u&&(0,l.jsx)(a.A,{value:"rust",label:"Rust",children:(0,l.jsx)(t.A,{language:"rust",children:u})}),m&&(0,l.jsx)(a.A,{value:"ruby",label:"Ruby",children:(0,l.jsx)(t.A,{language:"ruby",children:m})}),p&&(0,l.jsx)(a.A,{value:"elixir",label:"Elixir",children:(0,l.jsx)(t.A,{language:"elixir",children:p})}),f&&(0,l.jsx)(a.A,{value:"swift",label:"Swift",children:(0,l.jsx)(t.A,{language:"swift",children:f})}),j&&(0,l.jsx)(a.A,{value:"dart",label:"Dart",children:(0,l.jsx)(t.A,{language:"dart",children:j})}),x&&(0,l.jsx)(a.A,{value:"cli",label:"CLI",children:(0,l.jsx)(t.A,{language:"cli",children:x})})]}):null}}}]);