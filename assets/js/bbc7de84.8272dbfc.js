"use strict";(self.webpackChunkmomento_docs=self.webpackChunkmomento_docs||[]).push([[2856],{7246:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=r(4848),s=r(8453),o=(r(1441),r(5347));const a={sidebar_position:1,title:"API reference information",pagination_prev:null,sidebar_label:"API Reference",description:"Learn the API calls you need to know and how to use them with Momento Storage."},l="API reference for Momento Storage",i={id:"storage/develop/api-reference/index",title:"API reference information",description:"Learn the API calls you need to know and how to use them with Momento Storage.",source:"@site/docs/storage/develop/api-reference/index.mdx",sourceDirName:"storage/develop/api-reference",slug:"/storage/develop/api-reference/",permalink:"/storage/develop/api-reference/",draft:!1,unlisted:!1,editUrl:"https://github.com/momentohq/public-dev-docs/tree/main/docs/storage/develop/api-reference/index.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"API reference information",pagination_prev:null,sidebar_label:"API Reference",description:"Learn the API calls you need to know and how to use them with Momento Storage."},sidebar:"storageSidebar",next:{title:"Language Support",permalink:"/storage/develop/api-reference/language-support"}},c={},u=[{value:"Control APIs",id:"control-apis",level:2},{value:"Create store",id:"create-store",level:3},{value:"Delete store",id:"delete-store",level:3},{value:"List stores",id:"list-stores",level:3},{value:"Data APIs",id:"data-apis",level:2},{value:"Put",id:"put",level:3},{value:"Get",id:"get",level:3},{value:"Delete",id:"delete",level:3},{value:"Current status of API support in SDKs",id:"current-status-of-api-support-in-sdks",level:2}];function d(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"api-reference-for-momento-storage",children:"API reference for Momento Storage"}),"\n",(0,n.jsx)(t.h2,{id:"control-apis",children:"Control APIs"}),"\n",(0,n.jsx)(t.p,{children:"These API methods are used to manage and control stores."}),"\n",(0,n.jsx)(t.h3,{id:"create-store",children:"Create store"}),"\n",(0,n.jsx)(t.p,{children:"Creates a store with the provided name"}),"\n",(0,n.jsx)(t.p,{children:"Attributes:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"storeName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the store to be created."})]})})]}),"\n",(0,n.jsx)(o.r,{js:"const result = await storageClient.createStore(storeName);\nswitch (result.type) {\n  case CreateStoreResponse.AlreadyExists:\n    console.log(`Store '${storeName}' already exists`);\n    break;\n  case CreateStoreResponse.Success:\n    console.log(`Store '${storeName}' created`);\n    break;\n  case CreateStoreResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to create store '${storeName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:'final CreateStoreResponse response = storageClient.createStore("test-store").join();\nif (response instanceof CreateStoreResponse.Success) {\n  System.out.println("Store \'test-store\' created");\n} else if (response instanceof CreateStoreResponse.Error error) {\n  if (error.getCause() instanceof StoreAlreadyExistsException) {\n    System.out.println("Store \'test-store\' already exists");\n  } else {\n    throw new RuntimeException(\n        "An error occurred while attempting to create store \'test-store\': "\n            + error.getErrorCode(),\n        error);\n  }\n}',kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"delete-store",children:"Delete store"}),"\n",(0,n.jsx)(t.p,{children:"Deletes a store"}),"\n",(0,n.jsx)(t.p,{children:"Attributes:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"storeName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the store to be deleted."})]})})]}),"\n",(0,n.jsx)(o.r,{js:"const result = await storageClient.deleteStore(storeName);\nswitch (result.type) {\n  case DeleteStoreResponse.Success:\n    console.log(`Store '${storeName}' deleted`);\n    break;\n  case DeleteStoreResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to delete store '${storeName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:'final DeleteStoreResponse response = storageClient.deleteStore("test-store").join();\nif (response instanceof DeleteStoreResponse.Success) {\n  System.out.println("Store \'test-store\' deleted");\n} else if (response instanceof DeleteStoreResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to delete store \'test-store\': "\n          + error.getErrorCode(),\n      error);\n}',kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"list-stores",children:"List stores"}),"\n",(0,n.jsx)(t.p,{children:"Lists all stores"}),"\n",(0,n.jsx)(o.r,{js:"const result = await storageClient.listStores();\nswitch (result.type) {\n  case ListStoresResponse.Success:\n    console.log(\n      `Stores:\\n${result\n        .stores()\n        .map(c => c.getName())\n        .join('\\n')}\\n\\n`\n    );\n    break;\n  case ListStoresResponse.Error:\n    throw new Error(`An error occurred while attempting to list stores: ${result.errorCode()}: ${result.toString()}`);\n}",python:"",java:'final ListStoresResponse response = storageClient.listStores().join();\nif (response instanceof ListStoresResponse.Success success) {\n  final String stores =\n      success.getStores().stream().map(StoreInfo::getName).collect(Collectors.joining("\\n"));\n  System.out.println("Stores:\\n" + stores);\n} else if (response instanceof ListStoresResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to list stores: " + error.getErrorCode(), error);\n}',kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h2,{id:"data-apis",children:"Data APIs"}),"\n",(0,n.jsx)(t.p,{children:"These API methods are used to directly interact with data in a store."}),"\n",(0,n.jsx)(t.h3,{id:"put",children:"Put"}),"\n",(0,n.jsx)(t.p,{children:"Puts a value into the store. If a value for this key is already present it will be replaced by the new value."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"storeName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the store."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"key"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"The key under which the value is to be added."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"value"}),(0,n.jsx)(t.td,{children:"String / Bytes / Integer / Double"}),(0,n.jsx)(t.td,{children:"The value to be stored."})]})]})]}),"\n",(0,n.jsx)(o.r,{js:"// to store a string value:\nconst result = await storageClient.putString(storeName, 'test-key', 'test-value');\nswitch (result.type) {\n  case StoragePutResponse.Success:\n    console.log(\"Key 'test-key' stored successfully\");\n    break;\n  case StoragePutResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to store key 'test-key' in store '${storeName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}\n\n// Momento storage also supports these other data types:\nawait storageClient.putInt(storeName, 'test-key', 42);\nawait storageClient.putDouble(storeName, 'test-key', 3.14);\nawait storageClient.putBytes(storeName, 'test-key', Buffer.from('test-value'));",python:"",java:'// this example illustrates how to store a String value\nfinal PutResponse response = storageClient.put("test-store", "test-key", "test-value").join();\nif (response instanceof PutResponse.Success) {\n  System.out.println("Key \'test-key\' stored successfully");\n} else if (response instanceof PutResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to store key \'test-key\' in store \'test-store\': "\n          + error.getErrorCode(),\n      error);\n}\n\n// Momento Storage also supports storing values of type byte[], long, and double:\nbyte[] bytesValue = "test-byte-array-value".getBytes(StandardCharsets.UTF_8);\nstorageClient.put("test-store", "test-byte-array-key", bytesValue).join();\nstorageClient.put("test-store", "test-integer-key", 42L).join();\nstorageClient.put("test-store", "test-double-key", 42.0).join();',kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"get",children:"Get"}),"\n",(0,n.jsx)(t.p,{children:"Get the value stored for the given key."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"storeName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the store."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"key"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"The key whose value is to be retrieved."})]})]})]}),"\n",(0,n.jsx)(o.r,{js:"const getResponse = await storageClient.get(storeName, 'test-key');\n// simplified style; assume the value was found, and that it was a string\nconsole.log(`string hit: ${getResponse.value()!.string()!}`);\n\n// if the value was an integer:\nconst integerGetResponse = await storageClient.get(storeName, 'test-integer-key');\nconsole.log(`integer hit: ${integerGetResponse.value()!.int()!}`);\n\n// pattern-matching style; safer for production code\nswitch (getResponse.type) {\n  case StorageGetResponse.Found:\n    // if you know the value is a string:\n    console.log(`Retrieved value for key 'test-key': ${getResponse.value().string()!}`);\n    break;\n  case StorageGetResponse.NotFound:\n    console.log(`Key 'test-key' was not found in store '${storeName}'`);\n    break;\n  case StorageGetResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to get key 'test-key' from store '${storeName}': ${getResponse.errorCode()}: ${getResponse.toString()}`\n    );\n}",python:"",java:'final GetResponse response = storageClient.get("test-store", "test-key").join();\n\n// simplified style to access the value, if you\'re confident the value exists and you know the\n// type.\n// The optionals in this chain will throw exceptions when you call `.get()` if the item did not\n// exist in the store, or is another type besides a String\nfinal String value = response.valueWhenFound().get().getString().get();\n\n// Or, you can use pattern-matching for more production-safe code:\nif (response instanceof GetResponse.Found found) {\n  // if you know the value is a String:\n  String stringValue =\n      found\n          .value()\n          .getString()\n          .orElseThrow(() -> new RuntimeException("Value was not a String!"));\n  // if you don\'t know the type of the value:\n  switch (found.value().getType()) {\n    case STRING -> System.out.println("String value: " + found.value().getString().get());\n    case BYTE_ARRAY -> System.out.println(\n        "Byte array value: " + found.value().getByteArray().get());\n    case LONG -> System.out.println("Long value: " + found.value().getLong().get());\n    case DOUBLE -> System.out.println("Double value: " + found.value().getDouble().get());\n  }\n} else if (response instanceof GetResponse.NotFound) {\n  System.out.println("Key \'test-key\' was not found in store \'test-store\'");\n} else if (response instanceof GetResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to get key \'test-key\' from store \'test-store\': "\n          + error.getErrorCode(),\n      error);\n}',kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h3,{id:"delete",children:"Delete"}),"\n",(0,n.jsx)(t.p,{children:"Delete the value stored for the given key."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"storeName"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"Name of the store."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"key"}),(0,n.jsx)(t.td,{children:"String"}),(0,n.jsx)(t.td,{children:"The key whose value is to be deleted."})]})]})]}),"\n",(0,n.jsx)(o.r,{js:"const result = await storageClient.delete(storeName, 'test-key');\nswitch (result.type) {\n  case StorageDeleteResponse.Success:\n    console.log(\"Key 'test-key' deleted successfully\");\n    break;\n  case StorageDeleteResponse.Error:\n    throw new Error(\n      `An error occurred while attempting to delete key 'test-key' from store '${storeName}': ${result.errorCode()}: ${result.toString()}`\n    );\n}",python:"",java:'final DeleteResponse response = storageClient.delete("test-store", "test-key").join();\nif (response instanceof DeleteResponse.Success) {\n  System.out.println("Key \'test-key\' deleted successfully");\n} else if (response instanceof DeleteResponse.Error error) {\n  throw new RuntimeException(\n      "An error occurred while attempting to delete key \'test-key\' from store \'test-store\': "\n          + error.getErrorCode(),\n      error);\n}',kotlin:"",go:"",csharp:"",php:"",rust:"",elixir:"",swift:"",dart:"",ts:""}),"\n",(0,n.jsx)(t.h2,{id:"current-status-of-api-support-in-sdks",children:"Current status of API support in SDKs"}),"\n",(0,n.jsxs)(t.p,{children:["For the current status of API support in various SDK languages, see the ",(0,n.jsx)(t.a,{href:"/storage/develop/api-reference/language-support",children:"language support page"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},9365:(e,t,r)=>{r.d(t,{A:()=>a});r(6540);var n=r(4164);const s={tabItem:"tabItem_Ymn6"};var o=r(4848);function a(e){let{children:t,hidden:r,className:a}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,n.A)(s.tabItem,a),hidden:r,children:t})}},1470:(e,t,r)=>{r.d(t,{A:()=>w});var n=r(6540),s=r(4164),o=r(3104),a=r(6347),l=r(205),i=r(7485),c=r(1682),u=r(679);function d(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:s}}=e;return{value:t,label:r,attributes:n,default:s}}))}(r);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function p(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:r}=e;const s=(0,a.W6)(),o=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,i.aZ)(o),(0,n.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(s.location.search);t.set(o,e),s.replace({...s.location,search:t.toString()})}),[o,s])]}function f(e){const{defaultValue:t,queryString:r=!1,groupId:s}=e,o=h(e),[a,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[c,d]=g({queryString:r,groupId:s}),[f,x]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,o]=(0,u.Dv)(r);return[s,(0,n.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:s}),j=(()=>{const e=c??f;return p({value:e,tabValues:o})?e:null})();(0,l.A)((()=>{j&&i(j)}),[j]);return{selectedValue:a,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),x(e)}),[d,x,o]),tabValues:o}}var x=r(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=r(4848);function y(e){let{className:t,block:r,selectedValue:n,selectValue:a,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),u=e=>{const t=e.currentTarget,r=i.indexOf(t),s=l[r].value;s!==n&&(c(t),a(s))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;t=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;t=i[r]??i[i.length-1];break}}t?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":r},t),children:l.map((e=>{let{value:t,label:r,attributes:o}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>i.push(e),onKeyDown:d,onClick:u,...o,className:(0,s.A)("tabs__item",j.tabItem,o?.className,{"tabs__item--active":n===t}),children:r??t},t)}))})}function v(e){let{lazy:t,children:r,selectedValue:s}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===s));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function b(e){const t=f(e);return(0,m.jsxs)("div",{className:(0,s.A)("tabs-container",j.tabList),children:[(0,m.jsx)(y,{...t,...e}),(0,m.jsx)(v,{...t,...e})]})}function w(e){const t=(0,x.A)();return(0,m.jsx)(b,{...e,children:d(e.children)},String(t))}},1441:(e,t,r)=>{r(6540)},5347:(e,t,r)=>{r.d(t,{r:()=>l});var n=r(1470),s=r(9365),o=r(1432),a=(r(6540),r(4848));const l=e=>{let{js:t,python:r,java:l,kotlin:i,go:c,csharp:u,php:d,rust:h,ruby:p,elixir:g,swift:f,dart:x,cli:j}=e;return t||r||l||i||c||u||d||h||p||g||f||x||j?(0,a.jsxs)(n.A,{children:[t&&(0,a.jsx)(s.A,{value:"js",label:"JavaScript",children:(0,a.jsx)(o.A,{language:"js",children:t})}),r&&(0,a.jsx)(s.A,{value:"python",label:"Python",children:(0,a.jsx)(o.A,{language:"python",children:r})}),l&&(0,a.jsx)(s.A,{value:"java",label:"Java",children:(0,a.jsx)(o.A,{language:"java",children:l})}),i&&(0,a.jsx)(s.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(o.A,{language:"kotlin",children:i})}),c&&(0,a.jsx)(s.A,{value:"go",label:"Go",children:(0,a.jsx)(o.A,{language:"go",children:c})}),u&&(0,a.jsx)(s.A,{value:"csharp",label:"C#",children:(0,a.jsx)(o.A,{language:"csharp",children:u})}),d&&(0,a.jsx)(s.A,{value:"php",label:"PHP",children:(0,a.jsx)(o.A,{language:"php",children:d})}),h&&(0,a.jsx)(s.A,{value:"rust",label:"Rust",children:(0,a.jsx)(o.A,{language:"rust",children:h})}),p&&(0,a.jsx)(s.A,{value:"ruby",label:"Ruby",children:(0,a.jsx)(o.A,{language:"ruby",children:p})}),g&&(0,a.jsx)(s.A,{value:"elixir",label:"Elixir",children:(0,a.jsx)(o.A,{language:"elixir",children:g})}),f&&(0,a.jsx)(s.A,{value:"swift",label:"Swift",children:(0,a.jsx)(o.A,{language:"swift",children:f})}),x&&(0,a.jsx)(s.A,{value:"dart",label:"Dart",children:(0,a.jsx)(o.A,{language:"dart",children:x})}),j&&(0,a.jsx)(s.A,{value:"cli",label:"CLI",children:(0,a.jsx)(o.A,{language:"cli",children:j})})]}):null}}}]);